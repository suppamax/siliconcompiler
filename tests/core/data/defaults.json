{
    "arg": {
        "index": {
            "defvalue": null,
            "example": [
                "cli: -arg_index 0",
                "api: chip.set('arg','index','0')"
            ],
            "help": "Dynamic parameter passed in by the sc runtime as an argument to\na runtime task. The parameter enables configuration code\n(usually TCL) to use control flow that depend on the current\n'index'. The parameter is used the run() function and\nis not intended for external use.",
            "lock": "false",
            "require": null,
            "scope": "scratch",
            "shorthelp": "Current sindex",
            "signature": null,
            "switch": "-arg_index <str>",
            "type": "str",
            "value": null
        },
        "step": {
            "defvalue": null,
            "example": [
                "cli: -arg_step 'route'",
                "api: chip.set('arg', 'step', 'route')"
            ],
            "help": "Dynamic parameter passed in by the sc runtime as an argument to\na runtime task. The parameter enables configuration code\n(usually TCL) to use control flow that depend on the current\n'step'. The parameter is used the run() function and\nis not intended for external use.",
            "lock": "false",
            "require": null,
            "scope": "scratch",
            "shorthelp": "Current step",
            "signature": null,
            "switch": "-arg_step <str>",
            "type": "str",
            "value": null
        }
    },
    "asic": {
        "aspectratio": {
            "defvalue": null,
            "example": [
                "cli: -asic_aspectratio 2.0",
                "api: chip.set('asic', 'aspectratio', '2.0')"
            ],
            "help": "Height to width ratio of the block for automated floor-planning.\nValues below 0.1 and above 10 should be avoided as they will likely fail\nto converge during placement and routing. The ideal aspect ratio for\nmost designs is 1. This value is only used when no diearea or floorplan\nis supplied.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC block aspect ratio",
            "signature": null,
            "switch": "-asic_aspectratio <float>",
            "type": "float",
            "value": null
        },
        "corearea": {
            "defvalue": [],
            "example": [
                "cli: -asic_corearea '(0,0)'",
                "api: chip.set('asic', 'corearea', (0,0))"
            ],
            "help": "List of (x,y) points that define the outline of the core area for the\nphysical design. Simple rectangle areas can be defined with two points,\none for the lower left corner and one for the upper right corner. All\nvalues are specified in microns.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC core area outline",
            "signature": [],
            "switch": "-asic_corearea <[(float,float)]>",
            "type": "[(float,float)]",
            "value": []
        },
        "coremargin": {
            "defvalue": null,
            "example": [
                "cli: -asic_coremargin 1",
                "api: chip.set('asic', 'coremargin', '1')"
            ],
            "help": "Halo/margin between the die boundary and core placement for\nautomated floorplanning when no diearea or floorplan is\nsupplied. The value is specified in microns.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC block core margin",
            "signature": null,
            "switch": "-asic_coremargin <float>",
            "type": "float",
            "value": null
        },
        "delaymodel": {
            "defvalue": null,
            "example": [
                "cli: -asic_delaymodel ccs",
                "api: chip.set('asic', 'delaymodel', 'ccs')"
            ],
            "help": "Delay model to use for the target libs. Supported values\nare nldm and ccs.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC delay model",
            "signature": null,
            "switch": "-asic_delaymodel <str>",
            "type": "str",
            "value": null
        },
        "density": {
            "defvalue": null,
            "example": [
                "cli: -asic_density 30",
                "api: chip.set('asic', 'density', '30')"
            ],
            "help": "Target density based on the total design cell area reported\nafter synthesis. This number is used when no diearea or floorplan is\nsupplied. Any number between 1 and 100 is legal, but values above 50\nmay fail due to area/congestion issues during apr.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC target core density",
            "signature": null,
            "switch": "-asic_density <float>",
            "type": "float",
            "value": null
        },
        "diearea": {
            "defvalue": [],
            "example": [
                "cli: -asic_diearea '(0,0)'",
                "api: chip.set('asic', 'diearea', (0,0))"
            ],
            "help": "List of (x,y) points that define the outline of the die area for the\nphysical design. Simple rectangle areas can be defined with two points,\none for the lower left corner and one for the upper right corner. All\nvalues are specified in microns.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC die area outline",
            "signature": [],
            "switch": "-asic_diearea <[(float,float)]>",
            "type": "[(float,float)]",
            "value": []
        },
        "exclude": {
            "default": {
                "default": {
                    "defvalue": [],
                    "example": [
                        "cli: -asic_exclude drc 0 sram_macro",
                        "api: chip.set('asic','exclude','drc','0','sram_macro')"
                    ],
                    "help": "List of physical cells to exclude during execution. The process\nof exclusion is controlled by the flow step and tool setup. The list\nis commonly used by DRC tools and GDS export tools to direct the tool\nto exclude GDS information during GDS merge/export.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "ASIC excluded cells",
                    "signature": [],
                    "switch": "-asic_exclude 'step index <str>>",
                    "type": "[str]",
                    "value": []
                }
            }
        },
        "hpinlayer": {
            "defvalue": null,
            "example": [
                "cli: -asic_hpinlayer m4",
                "api: chip.set('asic', 'hpinlayer', 'm4')"
            ],
            "help": "Metal layer to use for automated horizontal pin placement\nduring APR.  The metal layers can be specified as technology\nagnostic SC layers starting with m1 or as hard PDK specific\nlayer names.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC vertical pin layer",
            "signature": null,
            "switch": "-asic_hpinlayer <str>",
            "type": "str",
            "value": null
        },
        "logiclib": {
            "defvalue": [],
            "example": [
                "cli: -asic_logiclib nangate45",
                "api: chip.set('asic', 'logiclib','nangate45')"
            ],
            "help": "List of all selected logic libraries libraries\nto use for optimization for a given library architecture\n(9T, 11T, etc).",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC logic libraries",
            "signature": [],
            "switch": "-asic_logiclib <str>",
            "type": "[str]",
            "value": []
        },
        "macrolib": {
            "defvalue": [],
            "example": [
                "cli: -asic_macrolib sram64x1024",
                "api: chip.set('asic', 'macrolib','sram64x1024')"
            ],
            "help": "List of macro libraries to be linked in during synthesis and place\nand route. Macro libraries are used for resolving instances but are\nnot used as targets for logic synthesis.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC macro libraries",
            "signature": [],
            "switch": "-asic_macrolib <str>",
            "type": "[str]",
            "value": []
        },
        "maxcap": {
            "defvalue": null,
            "example": [
                "cli: -asic_maxcap '0.25e-12'",
                "api: chip.set('asic', 'maxcap', '0.25e-12')"
            ],
            "help": "Maximum allowed capacitance per net. The number is\nspecified in Farads.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC maximum net capacitance",
            "signature": null,
            "switch": "-asic_maxcap <float>",
            "type": "float",
            "value": null
        },
        "maxfanout": {
            "defvalue": null,
            "example": [
                "cli: -asic_maxfanout 64",
                "api: chip.set('asic', 'maxfanout', '64')"
            ],
            "help": " Maximum driver fanout allowed during automated place and route.\nThe parameter directs the APR tool to break up any net with fanout\nlarger than maxfanout into sub nets and buffer.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC maximum fanout",
            "signature": null,
            "switch": "-asic_maxfanout <int>",
            "type": "int",
            "value": null
        },
        "maxlayer": {
            "defvalue": null,
            "example": [
                "cli: -asic_maxlayer m2",
                "api: chip.set('asic', 'maxlayer', 'm2')"
            ],
            "help": "Maximum SC metal layer name to be used for automated place and route .\nAlternatively the layer can be a string that matches a layer hard coded\nin the pdk_aprtech file. Designers wishing to use the same setup across\nmultiple process nodes should use the integer approach. For processes\nwith ambiguous starting routing layers, exact strings should be used.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC maximum routing layer",
            "signature": null,
            "switch": "-asic_maxlayer <str>",
            "type": "str",
            "value": null
        },
        "maxlength": {
            "defvalue": null,
            "example": [
                "cli: -asic_maxlength 1000",
                "api: chip.set('asic', 'maxlength', '1000')"
            ],
            "help": "Maximum total wire length allowed in design during APR. Any\nnet that is longer than maxlength is broken up into segments by\nthe tool.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC maximum wire length",
            "signature": null,
            "switch": "-asic_maxlength <float>",
            "type": "float",
            "value": null
        },
        "maxslew": {
            "defvalue": null,
            "example": [
                "cli: -asic_maxslew '0.25e-9'",
                "api: chip.set('asic', 'maxslew', '0.25e-9')"
            ],
            "help": "Maximum allowed transition time per net. The number\nis specified in seconds.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC maximum slew",
            "signature": null,
            "switch": "-asic_maxslew <float>",
            "type": "float",
            "value": null
        },
        "minlayer": {
            "defvalue": null,
            "example": [
                "cli: -asic_minlayer m2",
                "api: chip.set('asic', 'minlayer', 'm2')"
            ],
            "help": "Minimum SC metal layer name to be used for automated place and route .\nAlternatively the layer can be a string that matches a layer hard coded\nin the pdk_aprtech file. Designers wishing to use the same setup across\nmultiple process nodes should use the integer approach. For processes\nwith ambiguous starting routing layers, exact strings should be used.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC minimum routing layer",
            "signature": null,
            "switch": "-asic_minlayer <str>",
            "type": "str",
            "value": null
        },
        "ndr": {
            "default": {
                "defvalue": null,
                "example": [
                    "cli: -asic_ndr_width 'clk (0.2,0.2)",
                    "api: chip.set('asic','ndr','clk', (0.2,0.2))"
                ],
                "help": "Definitions of non-default routing rule specified on a per\nnet basis. Constraints are entered as a (width,space) tuples\nspecified in microns.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC non-default routing rule",
                "signature": null,
                "switch": "-asic_ndr 'netname <(float,float)>",
                "type": "(float,float)",
                "value": null
            }
        },
        "optlib": {
            "default": {
                "default": {
                    "defvalue": [],
                    "example": [
                        "cli: -asic_optlib 'place 0 asap7_lvt'",
                        "api: chip.set('asic','optlib','place','0','asap7_lvt')"
                    ],
                    "help": "List of logical libraries used during synthesis and place and route\nspecified on a per step and per index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "ASIC optimization libraries",
                    "signature": [],
                    "switch": "-asic_optlib 'step index <str>'",
                    "type": "[str]",
                    "value": []
                }
            }
        },
        "rclayer": {
            "default": {
                "defvalue": null,
                "example": [
                    "cli: -asic_rclayer 'clk m3",
                    "api: chip.set('asic', 'rclayer', 'clk', 'm3')"
                ],
                "help": "Technology agnostic metal layer to be used for parasitic\nextraction estimation during APR for the wire type specified\nCurrent the supported wire types are: clk, data. The metal\nlayers can be specified as technology agnostic SC layers\nstarting with m1 or as hard PDK specific layer names.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC parasitics layer",
                "signature": null,
                "switch": "-asic_rclayer 'sigtype <str>'",
                "type": "str",
                "value": null
            }
        },
        "stackup": {
            "defvalue": null,
            "example": [
                "cli: -asic_stackup 2MA4MB2MC",
                "api: chip.set('asic','stackup','2MA4MB2MC')"
            ],
            "help": "Target stackup to use in the design. The stackup is required\nparameter for PDKs with multiple metal stackups.",
            "lock": "false",
            "require": "asic",
            "scope": "job",
            "shorthelp": "ASIC metal stackup",
            "signature": null,
            "switch": "-asic_stackup <str>",
            "type": "str",
            "value": null
        },
        "vpinlayer": {
            "defvalue": null,
            "example": [
                "cli: -asic_vpinlayer m3",
                "api: chip.set('asic', 'vpinlayer', 'm3')"
            ],
            "help": "Metal layer to use for automated vertical pin placement\nduring APR.  The metal layers can be specified as technology\nagnostic SC layers starting with m1 or as hard PDK specific\nlayer names.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC vertical pin layer",
            "signature": null,
            "switch": "-asic_vpinlayer <str>",
            "type": "str",
            "value": null
        }
    },
    "bkpt": {
        "defvalue": [],
        "example": [
            "cli: -bkpt place",
            "api: chip.set('bkpt','place')"
        ],
        "help": "List of step stop (break) points. If the step is a TCL\nbased tool, then the breakpoints stops the flow inside the\nEDA tool. If the step is a command line tool, then the flow\ndrops into a Python interpreter.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Breakpoint list",
        "signature": [],
        "switch": "-bkpt <str>",
        "type": "[str]",
        "value": []
    },
    "cfg": {
        "author": [],
        "copy": "false",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -cfg mypdk.json",
            "api: chip.set('cfg','mypdk.json')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "List of filepaths to JSON formatted schema configuration\nmanifests. The files are read in automatically when using the\n'sc' command line application. In Python programs, JSON manifests\ncan be merged into the current working manifest using the\nread_manifest() method.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Configuration manifest",
        "signature": [],
        "switch": "-cfg <file>",
        "type": "[file]",
        "value": []
    },
    "checklist": {
        "default": {
            "default": {
                "criteria": {
                    "defvalue": [],
                    "example": [
                        "cli: -checklist_criteria 'ISO D000 errors==0'",
                        "api: chip.set('checklist','ISO','D000','criteria','errors==0')"
                    ],
                    "help": "Simple list of signoff criteria for checklist checklist item which\nmust all be met for signoff. Each signoff criteria consists of\na metric, a relational operator, and a value in the form.\n'metric op value'.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item criteria",
                    "signature": [],
                    "switch": "-checklist_criteria 'standard item <float>'",
                    "type": "[str]",
                    "value": []
                },
                "description": {
                    "defvalue": null,
                    "example": [
                        "cli: -checklist_description 'ISO D000 A-DESCRIPTION'",
                        "api: chip.set('checklist','ISO','D000','description','A-DESCRIPTION')"
                    ],
                    "help": "A short one line description of the checklist checklist item.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item description",
                    "signature": null,
                    "switch": "-checklist_description 'standard item <str>",
                    "type": "str",
                    "value": null
                },
                "index": {
                    "defvalue": "0",
                    "example": [
                        "cli: -checklist_index 'ISO D000 1'",
                        "api: chip.set('checklist','ISO','D000','index','1')"
                    ],
                    "help": "Flowgraph index used to verify the checklist checklist item.\nThe parameter should be left empty for manual checks and\nfor tool flows that bypass the SC infrastructure.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item index",
                    "signature": null,
                    "switch": "-checklist_index 'standard item <str>'",
                    "type": "str",
                    "value": "0"
                },
                "ok": {
                    "defvalue": "false",
                    "example": [
                        "cli: -checklist_ok 'ISO D000 true'",
                        "api: chip.set('checklist','ISO','D000','ok', True)"
                    ],
                    "help": "Boolean check mark for the checklist checklist item. A value of\nTrue indicates a human has inspected the all item dictionary\nparameters check out.",
                    "lock": "false",
                    "require": "all",
                    "scope": "global",
                    "shorthelp": "Checklist item ok",
                    "signature": null,
                    "switch": "-checklist_ok 'standard item <str>'",
                    "type": "bool",
                    "value": "false"
                },
                "rationale": {
                    "defvalue": [],
                    "example": [
                        "cli: -checklist_rational 'ISO D000 reliability'",
                        "api: chip.set('checklist','ISO','D000','rationale','reliability')"
                    ],
                    "help": "Rationale for the the checklist checklist item. Rationale should be a\nunique alphanumeric code used by the standard or a short one line\nor single word description.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item rational",
                    "signature": [],
                    "switch": "-checklist_rationale 'standard item <str>",
                    "type": "[str]",
                    "value": []
                },
                "report": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -checklist_report 'ISO D000 bold my.rpt'",
                            "api: chip.set('checklist','ISO','D000','report','hold', 'my.rpt')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepath to report(s) of specified type documenting the successful\nvalidation of the checklist checklist item. Specified on a per\nmetric basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Checklist item metric report",
                        "signature": [],
                        "switch": "-checklist_report 'standard item metric <file>'",
                        "type": "[file]",
                        "value": []
                    }
                },
                "requirement": {
                    "defvalue": null,
                    "example": [
                        "cli: -checklist_requirement 'ISO D000 DOCSTRING'",
                        "api: chip.set('checklist','ISO','D000','requirement','DOCSTRING')"
                    ],
                    "help": "A complete requirement description of the checklist checklist item\nentered as a multi-line string.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item requirement",
                    "signature": null,
                    "switch": "-checklist_requirement 'standard item <str>",
                    "type": "str",
                    "value": null
                },
                "step": {
                    "defvalue": null,
                    "example": [
                        "cli: -checklist_step 'ISO D000 place'",
                        "api: chip.set('checklist','ISO','D000','step','place')"
                    ],
                    "help": "Flowgraph step used to verify the checklist checklist item.\nThe parameter should be left empty for manual and for tool\nflows that bypass the SC infrastructure.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist item step",
                    "signature": null,
                    "switch": "-checklist_step 'standard item <str>'",
                    "type": "str",
                    "value": null
                },
                "waiver": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -checklist_waiver 'ISO D000 bold my.txt'",
                            "api: chip.set('checklist','ISO','D000','waiver','hold', 'my.txt')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepath to report(s) documenting waivers for the checklist checklist\nitem specified on a per metric basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Checklist item metric waivers",
                        "signature": [],
                        "switch": "-checklist_waiver 'standard item metric <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        }
    },
    "clean": {
        "defvalue": "false",
        "example": [
            "cli: -clean",
            "api: chip.set('clean', True)"
        ],
        "help": "Clean up all intermediate and non essential files at the end\nof a task, leaving only the log file and 'report' and\n'output' parameters associated with the task tool.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Clean up after run",
        "signature": null,
        "switch": "-clean <bool>",
        "type": "bool",
        "value": "false"
    },
    "clock": {
        "default": {
            "jitter": {
                "defvalue": null,
                "example": [
                    "cli: -clock_jitter 'clk 0.01'",
                    "api: chip.set('clock','clk','jitter','0.01')"
                ],
                "help": "Specifies the jitter for a clock source in nanoseconds.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Clock jitter",
                "signature": null,
                "switch": "-clock_jitter 'clkname <float>",
                "type": "float",
                "value": null
            },
            "period": {
                "defvalue": null,
                "example": [
                    "cli: -clock_period 'clk 10'",
                    "api: chip.set('clock','clk','period','10')"
                ],
                "help": "Specifies the period for a clock source in nanoseconds.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Clock period",
                "signature": null,
                "switch": "-clock_period 'clkname <float>",
                "type": "float",
                "value": null
            },
            "pin": {
                "defvalue": null,
                "example": [
                    "cli: -clock_pin 'clk top.pll.clkout'",
                    "api: chip.set('clock', 'clk','pin','top.pll.clkout')"
                ],
                "help": "Defines a clock name alias to assign to a clock source.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Clock driver pin",
                "signature": null,
                "switch": "-clock_pin 'clkname <str>'",
                "type": "str",
                "value": null
            }
        }
    },
    "cmdfile": {
        "author": [],
        "copy": "false",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -f design.f",
            "api: chip.set('cmdfile','design.f')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "Read the specified file, and act as if all text inside it was specified\nas command line parameters. Supported by most verilog simulators\nincluding Icarus and Verilator. The format of the file is not strongly\nstandardized. Support for comments and environment variables within\nthe file varies and depends on the tool used. SC simply passes on\nthe filepath toe the tool executable.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design compilation command file",
        "signature": [],
        "switch": "-f <file>",
        "type": "[file]",
        "value": []
    },
    "constraint": {
        "author": [],
        "copy": "true",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -constraint top.sdc",
            "api: chip.set('constraint','top.sdc')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "List of global constraints for the design to use during compilation.\nTypes of constraints include timing (SDC) and pin mappings files (PCF)\nfor FPGAs. More than one file can be supplied. Timing constraints are\nglobal and sourced in all MCMM scenarios.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design constraints files",
        "signature": [],
        "switch": "-constraint <file>",
        "type": "[file]",
        "value": []
    },
    "copyall": {
        "defvalue": "false",
        "example": [
            "cli: -copyall",
            "api: chip.set('copyall', 'true')"
        ],
        "help": "Specifies that all used files should be copied into the\nbuild directory, overriding the per schema entry copy\nsettings.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Copy all inputs to build directory",
        "signature": null,
        "switch": "-copyall <bool>",
        "type": "bool",
        "value": "false"
    },
    "credentials": {
        "author": [],
        "copy": "false",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -credentials /home/user/.sc/credentials",
            "api: chip.set('credentials','/home/user/.sc/credentials')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "Filepath to credentials used for remote processing. If the\ncredentials parameter is empty, the remote processing client program\ntries to access the \".sc/credentials\" file in the user's home\ndirectory. The file supports the following fields:\n\nuserid=<user id>\nsecret_key=<secret key used for authentication>\nserver=<ipaddr or url>",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "User credentials file",
        "signature": [],
        "switch": "-credentials <file>'",
        "type": "[file]",
        "value": []
    },
    "define": {
        "defvalue": [],
        "example": [
            "cli: -DCFG_ASIC=1",
            "api: chip.set('define','CFG_ASIC=1')"
        ],
        "help": "Symbol definition for source preprocessor.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design pre-processor symbol",
        "signature": [],
        "switch": "-D<str>",
        "type": "[str]",
        "value": []
    },
    "design": {
        "defvalue": null,
        "example": [
            "cli: -design hello_world",
            "api: chip.set('design', 'hello_world')"
        ],
        "help": "Name of the top level module to compile.\nRequired for all designs with more than one module.",
        "lock": "false",
        "require": "all",
        "scope": "global",
        "shorthelp": "Design top module name",
        "signature": null,
        "switch": "-design <str>",
        "type": "str",
        "value": null
    },
    "dir": {
        "defvalue": "build",
        "example": [
            "cli: -dir ./build_the_future",
            "api: chip.set('dir','./build_the_future')"
        ],
        "help": "The default build directory is in the local './build' where SC was\nexecuted. The 'dir' parameters can be used to set an alternate\ncompilation directory path.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Build directory",
        "signature": null,
        "switch": "-dir <dir>",
        "type": "dir",
        "value": "build"
    },
    "eda": {
        "default": {
            "continue": {
                "defvalue": "false",
                "example": [
                    "cli: -eda_continue 'verilator true'",
                    "api: chip.set('eda','verilator','continue', true)"
                ],
                "help": "Directs tool to continue operating even if errors are\nencountered.",
                "lock": "false",
                "require": "all",
                "scope": "job",
                "shorthelp": "Tool continue-on-error option",
                "signature": null,
                "switch": "-eda_continue 'tool <bool>'",
                "type": "bool",
                "value": "false"
            },
            "copy": {
                "defvalue": "false",
                "example": [
                    "cli: -eda_copy 'openroad true'",
                    "api: chip.set('eda','openroad','copy',true)"
                ],
                "help": "Specifies that the reference script directory should be copied and run\nfrom the local run directory.",
                "lock": "false",
                "require": "all",
                "scope": "job",
                "shorthelp": "Tool copy option",
                "signature": null,
                "switch": "-eda_copy 'tool <bool>'",
                "type": "bool",
                "value": "false"
            },
            "env": {
                "default": {
                    "default": {
                        "default": {
                            "defvalue": null,
                            "example": [
                                "cli: -eda_env 'openroad cts 0 MYVAR 42'",
                                "api: chip.set('eda','openroad','env','cts','0','MYVAR','42')"
                            ],
                            "help": "Environment variables to set for individual tasks. Keys and values\nshould be set in accordance with the tool's documentation. Most\ntools do not require extra environment variables to function.",
                            "lock": "false",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Tool environment variables",
                            "signature": null,
                            "switch": "-eda_env 'tool step index name <str>'",
                            "type": "str",
                            "value": null
                        }
                    }
                }
            },
            "exe": {
                "defvalue": null,
                "example": [
                    "cli: -eda_exe 'openroad openroad'",
                    "api:  chip.set('eda','openroad','exe','openroad')"
                ],
                "help": "Tool executable name.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool executable name",
                "signature": null,
                "switch": "-eda_exe 'tool<str>'",
                "type": "str",
                "value": null
            },
            "format": {
                "defvalue": null,
                "example": [
                    "cli: -eda_format 'yosys tcl'",
                    "api: chip.set('eda','yosys','format','tcl')"
                ],
                "help": "File format for tool manifest handoff. Supported formats are tcl,\nyaml, and json.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool manifest file format",
                "signature": null,
                "switch": "-eda_format 'tool <file>'",
                "type": "str",
                "value": null
            },
            "input": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -eda_input 'openroad place 0 oh_add.def'",
                            "api: chip.set('eda','openroad','input','place','0','oh_add.def')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "List of data files to be copied from previous flowgraph steps 'output'\ndirectory. The list of steps to copy files from is defined by the\nlist defined by the dictionary key ['flowgraph', step, index, 'input'].\nAll files must be available for flow to continue. If a file\nis missing, the program exists on an error.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool input files",
                        "signature": [],
                        "switch": "-eda_input 'tool step index <str>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "licenseserver": {
                "default": {
                    "defvalue": [],
                    "example": [
                        "cli: -eda_licenseserver 'atool ACME_LICENSE 1700@server'",
                        "api: chip.set('eda','atool','licenseserver','ACME_LICENSE','1700@server')"
                    ],
                    "help": "Defines a set of tool specific environment variables used by the executables\nthat depend on license key servers to control access. For multiple servers,\nseparate each server by a 'colon'. The named license variable are read at\nruntime (run()) and the environment variables are set.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Tool license servers",
                    "signature": [],
                    "switch": "-eda_licenseserver 'tool name <str>'",
                    "type": "[str]",
                    "value": []
                }
            },
            "option": {
                "default": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -eda_option 'openroad cts 0 -no_init'",
                            "api: chip.set('eda','openroad','option','cts','0','-no_init')"
                        ],
                        "help": "List of command line options for the tool executable, specified on\na per tool and per step basis. Options must not include spaces.\nFor multiple argument options, each option is a separate list element.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool executable options",
                        "signature": [],
                        "switch": "-eda_option 'tool step index name <str>'",
                        "type": "[str]",
                        "value": []
                    }
                }
            },
            "output": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -eda_output 'openroad place 0 oh_add.def'",
                            "api: chip.set('eda','openroad','output','place','0','oh_add.def')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "List of data files to be copied from previous flowgraph steps 'output'\ndirectory. The list of steps to copy files from is defined by the\nlist defined by the dictionary key ['flowgraph', step, index, 'output'].\nAll files must be available for flow to continue. If a file\nis missing, the program exists on an error.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool output files",
                        "signature": [],
                        "switch": "-eda_output 'tool step index <str>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "path": {
                "defvalue": null,
                "example": [
                    "cli: -eda_path 'openroad /usr/local/bin'",
                    "api:  chip.set('eda','openroad','path','/usr/local/bin')"
                ],
                "help": "File system path to tool executable. The path is pre pended to the 'exe'\nparameter for batch runs and output as an environment variable for\ninteractive setup. The path parameter can be left blank if the 'exe'\nis already in the environment search path.\nTool executable name.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool executable path",
                "signature": null,
                "switch": "-eda_path 'tool <dir>'",
                "type": "dir",
                "value": null
            },
            "postscript": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -eda_postscript 'yosys syn 0 post.tcl'",
                            "api: chip.set('eda','yosys','postscript','syn','0','post.tcl')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Path to a user supplied script to be executed after all built in\ntasks (except for data export) have completed.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool post-step script",
                        "signature": [],
                        "switch": "-eda_postscript 'tool step index <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "prescript": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -eda_prescript 'yosys syn 0 pre.tcl'",
                            "api: chip.set('eda','yosys','prescript','syn','0','pre.tcl')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Path to a user supplied script to execute after reading in the design\nbut before the main execution stage of the step. Exact entry point\ndepends on the step and main script being executed. An example\nof a prescript entry point would be immediately before global\nplacement.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool pre-step script",
                        "signature": [],
                        "switch": "-eda_prescript 'tool step index <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "refdir": {
                "default": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -eda_refdir 'yosys syn 0 ./myref'",
                            "api:  chip.set('eda','yosys','refdir','syn','0','./myref')"
                        ],
                        "help": "Path to directories containing reference flow scripts, specified\non a per step and index basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool script directory",
                        "signature": [],
                        "switch": "-eda_refdir 'tool step index <dir>'",
                        "type": "[dir]",
                        "value": []
                    }
                }
            },
            "regex": {
                "default": {
                    "default": {
                        "default": {
                            "defvalue": [],
                            "example": [
                                "cli: -eda_regex 'openroad place 0 error -v ERROR",
                                "api: chip.set('eda','openroad','regex','place','0','error','-v ERROR')"
                            ],
                            "help": " A list of piped together grep commands. Each entry represents a set\nof command line arguments for grep including the regex pattern to\nmatch. Starting with the first list entry, each grep output is piped\ninto the following grep command in the list. Supported grep options\ninclude, -t, -i, -E, -x, -e. Patterns starting with \"-\" should be\ndirectly preceeded by the \"-e\" option. The following example\nillustrates the concept.\n\nUNIX grep:\n>> grep WARNING place.log | grep -v \"bbox\" > place.warnings\n\nsiliconcompiler:\nchip.set('eda','openroad','regex','place',0','warnings',[\"WARNING\",\"-v bbox\"])\n\nDefines a set of tool specific environment variables used by the executables\nthat depend on license key servers to control access. For multiple servers,\nseparate each server by a 'colon'. The named license variable are read at\nruntime (run()) and the environment variables are set.",
                            "lock": "false",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Tool regex filter",
                            "signature": [],
                            "switch": "-eda_regex 'tool step index suffix <str>'",
                            "type": "[str]",
                            "value": []
                        }
                    }
                }
            },
            "report": {
                "default": {
                    "default": {
                        "default": {
                            "author": [],
                            "copy": "false",
                            "date": [],
                            "defvalue": [],
                            "example": [
                                "cli: -eda_report 'openroad place 0 holdtns place.log'",
                                "api: chip.set('eda','openroad','report','syn','0','holdtns','place.log')"
                            ],
                            "filehash": [],
                            "hashalgo": "sha256",
                            "help": "List of report files associated with a specific 'metric'. The file path\nspecified is relative to the run directory of the current task.",
                            "lock": "false",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Tool report files",
                            "signature": [],
                            "switch": "-eda_report 'tool step index metric <str>'",
                            "type": "[file]",
                            "value": []
                        }
                    }
                }
            },
            "require": {
                "default": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -eda_require 'openroad cts 0 design'",
                            "api: chip.set('eda','openroad','require','cts','0','design')"
                        ],
                        "help": "List of keypaths to required tool parameters. The list is used\nby check() to verify that all parameters have been set up before\nstep execution begins.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool parameter requirements",
                        "signature": [],
                        "switch": "-eda_require 'tool step index <str>'",
                        "type": "[str]",
                        "value": []
                    }
                }
            },
            "script": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -eda_script 'yosys syn 0 syn.tcl'",
                            "api: chip.set('eda','yosys','script','syn','0','syn.tcl')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Path to the entry script called by the executable specified\non a per tool and per step basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool entry script",
                        "signature": [],
                        "switch": "-eda_script 'tool step index <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "threads": {
                "default": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -eda_threads 'magic drc 0 64'",
                            "api: chip.set('eda','magic','threads','drc','0','64')"
                        ],
                        "help": "Thread parallelism to use for execution specified on a per tool and per\nstep basis. If not specified, SC queries the operating system and sets\nthe threads based on the maximum thread count supported by the\nhardware.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Tool thread parallelism",
                        "signature": null,
                        "switch": "-eda_threads 'tool step index <int>'",
                        "type": "int",
                        "value": null
                    }
                }
            },
            "variable": {
                "default": {
                    "default": {
                        "default": {
                            "defvalue": [],
                            "example": [
                                "cli: -eda_variable 'openroad cts 0 myvar 42'",
                                "api: chip.set('eda','openroad','variable','cts','0','myvar','42')"
                            ],
                            "help": "Tool script variables specified as key value pairs. Variable\nnames and value types must match the name and type of tool and reference\nscript consuming the variable.",
                            "lock": "false",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Tool script variables",
                            "signature": [],
                            "switch": "-eda_variable 'tool step index name <str>'",
                            "type": "[str]",
                            "value": []
                        }
                    }
                }
            },
            "vendor": {
                "defvalue": null,
                "example": [
                    "cli: -eda_vendor 'yosys yosys'",
                    "api: chip.set('eda','yosys','vendor','yosys')"
                ],
                "help": "Name of the tool vendor. Parameter can be used to set vendor\nspecific technology variables in the PDK and libraries. For\nopen source projects, the project name should be used in\nplace of vendor.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool vendor",
                "signature": null,
                "switch": "-eda_vendor 'tool <str>'",
                "type": "str",
                "value": null
            },
            "version": {
                "defvalue": [],
                "example": [
                    "cli: -eda_version 'openroad 2.0'",
                    "api:  chip.set('eda','openroad','version','2.0')"
                ],
                "help": "List of acceptable versions of the tool executable to be used.\nDuring task execution, the the tool is called with the 'vswitch'\nto check the runtime executable version. When the 'vercheck'\nis set to True, of the 'version' fails to match the system\nexecutable, then the job is halted pre-execution.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool version number",
                "signature": [],
                "switch": "-eda_version 'tool <str>'",
                "type": "[str]",
                "value": []
            },
            "vswitch": {
                "defvalue": [],
                "example": [
                    "cli: -eda_vswitch 'openroad -version'",
                    "api:  chip.set('eda','openroad','vswitch','-version')"
                ],
                "help": "Command line switch to use with executable used to print out\nthe version number. Common switches include -v, -version,\n--version. Some tools may require extra flags to run in batch mode.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool executable version switch",
                "signature": [],
                "switch": "-eda_vswitch 'tool <str>'",
                "type": "[str]",
                "value": []
            },
            "warningoff": {
                "defvalue": [],
                "example": [
                    "cli: -eda_warningoff 'verilator COMBDLY'",
                    "api: chip.set('eda','verilator','warningoff','COMBDLY')"
                ],
                "help": "A list of EDA warnings for which printing should be suppressed.\nGenerally this is done on a per design basis after review has\ndetermined that warning can be safely ignored The code for turning\noff warnings can be found in the specific tool reference manual.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool warning filter",
                "signature": [],
                "switch": "-eda_warningoff 'tool <str>'",
                "type": "[str]",
                "value": []
            }
        }
    },
    "env": {
        "default": {
            "defvalue": null,
            "example": [
                "cli: -env 'PDK_HOME /disk/mypdk'",
                "api: chip.set('env', 'PDK_HOME', '/disk/mypdk')"
            ],
            "help": "Certain tools and reference flows require global environment\nvariables to be set. These variables can be managed externally or\nspecified through the env variable.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "Environment variables",
            "signature": null,
            "switch": "-env 'key <str>",
            "type": "str",
            "value": null
        }
    },
    "flow": {
        "defvalue": null,
        "example": [
            "cli: -flow asicfow",
            "api: chip.set('flow','asicflow')"
        ],
        "help": "Sets the flow for the current run. The flow name\nmust match up with an 'flow' in the flowgraph",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Compilation flow",
        "signature": null,
        "switch": "-flow <str>",
        "type": "str",
        "value": null
    },
    "flowarg": {
        "default": {
            "defvalue": [],
            "example": [
                "cli: -flowarg 'n 100",
                "api: chip.set('flowarg','n', 100)"
            ],
            "help": "Parameter passed in as key/value pair to the flow target\nreferenced in the load_flow() API call. See the target flow\nfor specific guidelines regarding configuration parameters.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "Target flow argument",
            "signature": [],
            "switch": "-flowarg 'arg <str>",
            "type": "[str]",
            "value": []
        }
    },
    "flowgraph": {
        "default": {
            "default": {
                "default": {
                    "args": {
                        "defvalue": [],
                        "example": [
                            "cli: -flowgraph_args 'asicflow cts 0 0'",
                            "api:  chip.add('flowgraph','asicflow','cts','0','args','0')"
                        ],
                        "help": "User specified flowgraph string arguments specified on a per\nstep and per index basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph setup arguments",
                        "signature": [],
                        "switch": "-flowgraph_args 'flow step index <str>'",
                        "type": "[str]",
                        "value": []
                    },
                    "input": {
                        "defvalue": [],
                        "example": [
                            "cli: -flowgraph_input 'asicflow cts 0 (place,0)'",
                            "api:  chip.set('flowgraph','asicflow','cts','0','input',('place','0'))"
                        ],
                        "help": "A list of inputs for the current step and index, specified as a\n(step,index) tuple.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph step input",
                        "signature": [],
                        "switch": "-flowgraph_input 'flow step index <(str,str)>'",
                        "type": "[(str,str)]",
                        "value": []
                    },
                    "timeout": {
                        "defvalue": null,
                        "example": [
                            "cli: -flowgraph_timeout 'asicflow cts 0 3600'",
                            "api:  chip.set('flowgraph','asicflow','cts','0','timeout', 3600)"
                        ],
                        "help": "Timeout value in seconds specified on a per step and per index\nbasis. The flowgraph timeout value is compared against the\nwall time tracked by the SC runtime to determine if an\noperation should continue. Timeout values help in situations\nwhere 1.) an operation is stuck and may never finish. 2.) the\noperation progress has saturated and continued execution has\na negative return on investment.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph task timeout value",
                        "signature": null,
                        "switch": "-flowgraph_timeout 'flow step 0 <float>'",
                        "type": "float",
                        "value": null
                    },
                    "tool": {
                        "defvalue": null,
                        "example": [
                            "cli: -flowgraph_tool 'asicflow place openroad'",
                            "api: chip.set('flowgraph','asicflow','place','0','tool','openroad')"
                        ],
                        "help": "Name of the tool name used for task execution. Builtin tool names\nassociated bound to core API functions include: minimum, maximum, join,\nverify, mux.",
                        "lock": "false",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph tool selection",
                        "signature": null,
                        "switch": "-flowgraph_tool 'flow step <str>'",
                        "type": "str",
                        "value": null
                    },
                    "valid": {
                        "defvalue": "false",
                        "example": [
                            "cli: -flowgraph_valid 'asicflow cts 0 true'",
                            "api:  chip.set('flowgraph','asicflow','cts','0','valid',True)"
                        ],
                        "help": "Flowgraph valid bit specified on a per step and per index basis.\nThe parameter can be used to control flow execution. If the bit\nis cleared (0), then the step/index combination is invalid and\nshould not be run.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Flowgraph task valid bit",
                        "signature": null,
                        "switch": "-flowgraph_valid 'flow step index <str>'",
                        "type": "bool",
                        "value": "false"
                    },
                    "weight": {
                        "default": {
                            "defvalue": null,
                            "example": [
                                "cli: -flowgraph_weight 'asicflow cts 0 area_cells 1.0'",
                                "api:  chip.set('flowgraph','asicflow','cts','0','weight','area_cells',1.0)"
                            ],
                            "help": "Weights specified on a per step and per metric basis used to give\neffective \"goodnes\" score for a step by calculating the sum all step\nreal metrics results by the corresponding per step weights.",
                            "lock": "false",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Flowgraph metric weights",
                            "signature": null,
                            "switch": "-flowgraph_weight 'flow step metric <float>'",
                            "type": "float",
                            "value": null
                        }
                    }
                }
            }
        }
    },
    "flowstatus": {
        "default": {
            "default": {
                "error": {
                    "defvalue": null,
                    "example": [
                        "cli: -flowstatus_error 'cts 10 1'",
                        "api:  chip.set('flowstatus','cts','10','error',1)"
                    ],
                    "help": "Status parameter that tracks runstep errors.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Flowgraph task error status",
                    "signature": null,
                    "switch": "-flowstatus_error 'step index <int>'",
                    "type": "int",
                    "value": null
                },
                "select": {
                    "defvalue": [],
                    "example": [
                        "cli: -flowstatus_select 'cts 0 (place,42)'",
                        "api:  chip.set('flowstatus','cts','0','select',('place','42'))"
                    ],
                    "help": "List of selected inputs for the current step/index specified as\n(in_step,in_index) tuple.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Flowgraph task select record",
                    "signature": [],
                    "switch": "-flowstatus_select 'step index <(str,str)>'",
                    "type": "[(str,str)]",
                    "value": []
                }
            }
        }
    },
    "fpga": {
        "arch": {
            "author": [],
            "copy": "true",
            "date": [],
            "defvalue": [],
            "example": [
                "cli: -fpga_arch myfpga.xml",
                "api:  chip.set('fpga', 'arch', 'myfpga.xml')"
            ],
            "filehash": [],
            "hashalgo": "sha256",
            "help": "Architecture definition file for FPGA place and route\ntool. For the VPR tool, the file is a required XML based description,\nallowing targeting a large number of virtual and commercial\narchitectures. For most commercial tools, the fpga part name provides\nenough information to enable compilation and the 'arch' parameter is\noptional.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "FPGA architecture file",
            "signature": [],
            "switch": "-fpga_arch <file>",
            "type": "[file]",
            "value": []
        },
        "board": {
            "defvalue": null,
            "example": [
                "cli: -fpga_board parallella",
                "api:  chip.set('fpga', 'board', 'parallella')"
            ],
            "help": "Complete board name used as a device target by the FPGA compilation\ntool. The board name must be an exact string match to the partname\nhard coded within the FPGA eda tool. The parameter is optional and can\nbe used in place of a partname and pin constraints for some tools.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "FPGA board name",
            "signature": null,
            "switch": "-fpga_board <str>",
            "type": "str",
            "value": null
        },
        "flash": {
            "defvalue": "false",
            "example": [
                "cli: -fpga_flash",
                "api:  chip.set('fpga', 'flash', True)"
            ],
            "help": "Specifies that the bitstream should be flashed in the board/device.\nThe default is to load the bitstream into volatile memory (SRAM).",
            "lock": "false",
            "require": "all",
            "scope": "job",
            "shorthelp": "FPGA flash enable",
            "signature": null,
            "switch": "-fpga_flash <bool>",
            "type": "bool",
            "value": "false"
        },
        "partname": {
            "defvalue": null,
            "example": [
                "cli: -fpga_partname fpga64k",
                "api:  chip.set('fpga', 'partname', 'fpga64k')"
            ],
            "help": "Complete part name used as a device target by the FPGA compilation\ntool. The part name must be an exact string match to the partname\nhard coded within the FPGA eda tool.",
            "lock": "false",
            "require": "fpga",
            "scope": "job",
            "shorthelp": "FPGA part name",
            "signature": null,
            "switch": "-fpga_partname <str>",
            "type": "str",
            "value": null
        },
        "program": {
            "defvalue": "false",
            "example": [
                "cli: -fpga_program",
                "api:  chip.set('fpga', 'program', True)"
            ],
            "help": "Specifies that the bitstream should be loaded into an FPGA.",
            "lock": "false",
            "require": "all",
            "scope": "job",
            "shorthelp": "FPGA program enable",
            "signature": null,
            "switch": "-fpga_program <bool>",
            "type": "bool",
            "value": "false"
        },
        "vendor": {
            "defvalue": null,
            "example": [
                "cli: -fpga_vendor acme",
                "api:  chip.set('fpga', 'vendor', 'acme')"
            ],
            "help": "Name of the FPGA vendor. The parameter is used to check part\nname and to select the eda tool flow in case 'edaflow' is\nunspecified.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "FPGA vendor name",
            "signature": null,
            "switch": "-fpga_vendor <str>",
            "type": "str",
            "value": null
        }
    },
    "frontend": {
        "defvalue": "verilog",
        "example": [
            "cli: -frontend systemverilog",
            "api: chip.set('frontend', 'systemverilog')"
        ],
        "help": "Specifies the frontend that flows should use for importing and\nprocessing source files. Default option is 'verilog', also supports\n'systemverilog' and 'chisel'. When using the Python API, this parameter\nmust be configured before calling load_target().",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Compilation frontend",
        "signature": null,
        "switch": "-frontend <frontend>",
        "type": "str",
        "value": "verilog"
    },
    "hash": {
        "defvalue": "false",
        "example": [
            "cli: -hash",
            "api: chip.set('hash', True)"
        ],
        "help": "Enables hashing of all inputs and outputs during\ncompilation. The hash values are stored in the hashvalue\nfield of the individual parameters.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Enable file hashing",
        "signature": null,
        "switch": "-hash <bool>",
        "type": "bool",
        "value": "false"
    },
    "history": {},
    "idir": {
        "defvalue": [],
        "example": [
            "cli: '+incdir+./mylib'",
            "api: chip.set('idir','./mylib')"
        ],
        "help": "Search paths to look for files included in the design using\nthe ```include`` statement.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design search paths",
        "signature": [],
        "switch": [
            "+incdir+<dir>",
            "-I <dir>"
        ],
        "type": "[dir]",
        "value": []
    },
    "indexlist": {
        "defvalue": [],
        "example": [
            "cli: -indexlist 0",
            "api: chip.set('indexlist','0')"
        ],
        "help": "List of indices to execute. The default is to execute all\nindices for each step of a run.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Compilation index list",
        "signature": [],
        "switch": "-indexlist <index>",
        "type": "[str]",
        "value": []
    },
    "jobincr": {
        "defvalue": "false",
        "example": [
            "cli: -jobincr",
            "api: chip.set('jobincr', True)"
        ],
        "help": "Forces an auto-update of the jobname parameter if a directory\nmatching the jobname is found in the build directory. If the\njobname does not include a trailing digit, then a the number\n'1' is added to the jobname before updating the jobname\nparameter.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Autoincrement jobname",
        "signature": null,
        "switch": "-jobincr <bool>",
        "type": "bool",
        "value": "false"
    },
    "jobinput": {
        "default": {
            "default": {
                "default": {
                    "defvalue": null,
                    "example": [
                        "cli: -jobinput 'job1 cts 0 job0'",
                        "api:  chip.set('jobinput', 'job1', 'cts, '0', 'job0')"
                    ],
                    "help": "Specifies jobname inputs for the current run() on a per step\nand per index basis. During execution, the default behavior is to\ncopy inputs from the current job.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Input job name",
                    "signature": null,
                    "switch": "-jobinput 'job step index <str>'",
                    "type": "str",
                    "value": null
                }
            }
        }
    },
    "jobname": {
        "defvalue": "job0",
        "example": [
            "cli: -jobname may1",
            "api: chip.set('jobname','may1')"
        ],
        "help": "Jobname during invocation of run(). The jobname combined with a\ndefined director structure (<dir>/<design>/<jobname>/<step>/<index>)\nenables multiple levels of transparent job, step, and index\nintrospection.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Job name",
        "signature": null,
        "switch": "-jobname <str>",
        "type": "str",
        "value": "job0"
    },
    "jobscheduler": {
        "defvalue": null,
        "example": [
            "cli: -jobscheduler slurm",
            "api: chip.set('jobscheduler','slurm')"
        ],
        "help": "Sets the type of job scheduler to be used for each individual\nflowgraph steps. If the parameter is undefined, the steps are executed\non the same machine that the SC was launched on. If 'slurm' is used,\nthe host running the 'sc' command must be running a 'slurmctld' daemon\nmanaging a Slurm cluster. Additionally, the build directory ('-dir')\nmust be located in shared storage which can be accessed by all hosts\nin the cluster.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Job scheduler name",
        "signature": null,
        "switch": "-jobscheduler <str>",
        "type": "str",
        "value": null
    },
    "libext": {
        "defvalue": [],
        "example": [
            "cli: +libext+sv",
            "api: chip.set('libext','sv')"
        ],
        "help": "List of file extensions that should be used for finding modules.\nFor example, if -y is specified as ./lib\", and '.v' is specified as\nlibext then the files ./lib/\\*.v \", will be searched for\nmodule matches.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design file extensions",
        "signature": [],
        "switch": "+libext+<str>",
        "type": "[str]",
        "value": []
    },
    "library": {
        "default": {
            "aocv": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_aocv 'lib ss lib ss.lib.gz'",
                            "api: chip.set('library','lib','aocv','ss','lib','ss.lib.gz')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepaths to AOCV models. Timing files are specified\nper lib, corner, and filetype basis. Acceptable file formats\ninclude 'lib', 'lib.gz', and 'ldb'.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library AOCV timing model",
                        "signature": [],
                        "switch": "-library_aocv 'lib corner filetype <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "arch": {
                "defvalue": null,
                "example": [
                    "cli: -library_arch 'mylib 12t'",
                    "api: chip.set('library','mylib','arch,'12t')"
                ],
                "help": "Specifier string that identifies the row height or performance\nclass of a standard cell library for APR. The arch must match up with\nthe name used in the pdk_aprtech dictionary. Mixing of library archs\nin a flat place and route block is not allowed. Examples of library\narchs include 6 track libraries, 9 track libraries, 10 track\nlibraries, etc. The parameter is optional for 'component'\nlibtypes.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library architecture",
                "signature": null,
                "switch": "-library_arch 'lib <str>'",
                "type": "str",
                "value": null
            },
            "ccs": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_ccs 'lib ss lib ss.lib.gz'",
                            "api: chip.set('library','lib','ccs','ss','lib','ss.lib.gz')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepaths to CCS models. Timing files are specified\nper lib, corner, and filetype basis. Acceptable file formats\ninclude 'lib', 'lib.gz', and 'ldb'.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library CCS timing model",
                        "signature": [],
                        "switch": "-library_ccs 'lib corner filetype <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "cells": {
                "antenna": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_antenna 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',antenna,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library antenna cell list",
                    "signature": [],
                    "switch": "-library_cells_antenna 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "buf": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_buf 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',buf,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library buf cell list",
                    "signature": [],
                    "switch": "-library_cells_buf 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "clkbuf": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_clkbuf 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',clkbuf,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library clkbuf cell list",
                    "signature": [],
                    "switch": "-library_cells_clkbuf 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "clkgate": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_clkgate 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',clkgate,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library clkgate cell list",
                    "signature": [],
                    "switch": "-library_cells_clkgate 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "clkinv": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_clkinv 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',clkinv,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library clkinv cell list",
                    "signature": [],
                    "switch": "-library_cells_clkinv 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "clklogic": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_clklogic 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',clklogic,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library clklogic cell list",
                    "signature": [],
                    "switch": "-library_cells_clklogic 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "driver": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_driver 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',driver,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library driver cell list",
                    "signature": [],
                    "switch": "-library_cells_driver 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "endcap": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_endcap 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',endcap,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library endcap cell list",
                    "signature": [],
                    "switch": "-library_cells_endcap 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "filler": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_filler 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',filler,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library filler cell list",
                    "signature": [],
                    "switch": "-library_cells_filler 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "hold": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_hold 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',hold,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library hold cell list",
                    "signature": [],
                    "switch": "-library_cells_hold 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "ignore": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_ignore 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',ignore,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library ignore cell list",
                    "signature": [],
                    "switch": "-library_cells_ignore 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "load": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_load 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',load,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library load cell list",
                    "signature": [],
                    "switch": "-library_cells_load 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "tap": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_tap 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',tap,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library tap cell list",
                    "signature": [],
                    "switch": "-library_cells_tap 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "tie": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_cells_tie 'mylib *eco*'",
                        "api: chip.set('library','mylib','cells',tie,'*eco*')"
                    ],
                    "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library tie cell list",
                    "signature": [],
                    "switch": "-library_cells_tie 'lib <str>'",
                    "type": "[str]",
                    "value": []
                }
            },
            "checklist": {
                "default": {
                    "default": {
                        "criteria": {
                            "defvalue": [],
                            "example": [
                                "cli: -library_checklist_criteria 'lib ISO D000 errors==0'",
                                "api: chip.set('library','default','checklist','ISO','D000','criteria','errors==0')"
                            ],
                            "help": "Simple list of signoff criteria for library checklist item which\nmust all be met for signoff. Each signoff criteria consists of\na metric, a relational operator, and a value in the form.\n'metric op value'.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item criteria",
                            "signature": [],
                            "switch": "-library_checklist_criteria 'lib standard item <float>'",
                            "type": "[str]",
                            "value": []
                        },
                        "description": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_checklist_description 'lib ISO D000 A-DESCRIPTION'",
                                "api: chip.set('library','default','checklist','ISO','D000','description','A-DESCRIPTION')"
                            ],
                            "help": "A short one line description of the library checklist item.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item description",
                            "signature": null,
                            "switch": "-library_checklist_description 'lib standard item <str>",
                            "type": "str",
                            "value": null
                        },
                        "index": {
                            "defvalue": "0",
                            "example": [
                                "cli: -library_checklist_index 'lib ISO D000 1'",
                                "api: chip.set('library','default','checklist','ISO','D000','index','1')"
                            ],
                            "help": "Flowgraph index used to verify the library checklist item.\nThe parameter should be left empty for manual checks and\nfor tool flows that bypass the SC infrastructure.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item index",
                            "signature": null,
                            "switch": "-library_checklist_index 'lib standard item <str>'",
                            "type": "str",
                            "value": "0"
                        },
                        "ok": {
                            "defvalue": "false",
                            "example": [
                                "cli: -library_checklist_ok 'lib ISO D000 true'",
                                "api: chip.set('library','default','checklist','ISO','D000','ok', True)"
                            ],
                            "help": "Boolean check mark for the library checklist item. A value of\nTrue indicates a human has inspected the all item dictionary\nparameters check out.",
                            "lock": "false",
                            "require": "all",
                            "scope": "global",
                            "shorthelp": "Library checklist item ok",
                            "signature": null,
                            "switch": "-library_checklist_ok 'lib standard item <str>'",
                            "type": "bool",
                            "value": "false"
                        },
                        "rationale": {
                            "defvalue": [],
                            "example": [
                                "cli: -library_checklist_rational 'lib ISO D000 reliability'",
                                "api: chip.set('library','default','checklist','ISO','D000','rationale','reliability')"
                            ],
                            "help": "Rationale for the the library checklist item. Rationale should be a\nunique alphanumeric code used by the standard or a short one line\nor single word description.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item rational",
                            "signature": [],
                            "switch": "-library_checklist_rationale 'lib standard item <str>",
                            "type": "[str]",
                            "value": []
                        },
                        "report": {
                            "default": {
                                "author": [],
                                "copy": "false",
                                "date": [],
                                "defvalue": [],
                                "example": [
                                    "cli: -library_checklist_report 'lib ISO D000 bold my.rpt'",
                                    "api: chip.set('library','default','checklist','ISO','D000','report','hold', 'my.rpt')"
                                ],
                                "filehash": [],
                                "hashalgo": "sha256",
                                "help": "Filepath to report(s) of specified type documenting the successful\nvalidation of the library checklist item. Specified on a per\nmetric basis.",
                                "lock": "false",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "Library checklist item metric report",
                                "signature": [],
                                "switch": "-library_checklist_report 'lib standard item metric <file>'",
                                "type": "[file]",
                                "value": []
                            }
                        },
                        "requirement": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_checklist_requirement 'lib ISO D000 DOCSTRING'",
                                "api: chip.set('library','default','checklist','ISO','D000','requirement','DOCSTRING')"
                            ],
                            "help": "A complete requirement description of the library checklist item\nentered as a multi-line string.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item requirement",
                            "signature": null,
                            "switch": "-library_checklist_requirement 'lib standard item <str>",
                            "type": "str",
                            "value": null
                        },
                        "step": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_checklist_step 'lib ISO D000 place'",
                                "api: chip.set('library','default','checklist','ISO','D000','step','place')"
                            ],
                            "help": "Flowgraph step used to verify the library checklist item.\nThe parameter should be left empty for manual and for tool\nflows that bypass the SC infrastructure.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library checklist item step",
                            "signature": null,
                            "switch": "-library_checklist_step 'lib standard item <str>'",
                            "type": "str",
                            "value": null
                        },
                        "waiver": {
                            "default": {
                                "author": [],
                                "copy": "false",
                                "date": [],
                                "defvalue": [],
                                "example": [
                                    "cli: -library_checklist_waiver 'lib ISO D000 bold my.txt'",
                                    "api: chip.set('library','default','checklist','ISO','D000','waiver','hold', 'my.txt')"
                                ],
                                "filehash": [],
                                "hashalgo": "sha256",
                                "help": "Filepath to report(s) documenting waivers for the library checklist\nitem specified on a per metric basis.",
                                "lock": "false",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "Library checklist item metric waivers",
                                "signature": [],
                                "switch": "-library_checklist_waiver 'lib standard item metric <file>'",
                                "type": "[file]",
                                "value": []
                            }
                        }
                    }
                }
            },
            "def": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_def 'mylib 10M mylib.def'",
                        "api: chip.set('library','mylib','def','10M','mylib.def')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library DEF layout files specified on a\nper stackup basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library DEF layout files",
                    "signature": [],
                    "switch": "-library_def 'lib stackup <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "default": {
                "source": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_source 'mylib hello hello.v'",
                        "api: chip.set('library','mylib','hello','source','hello.v')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library source files specified on a per design basis. File type\nis inferred from the file suffix. The parameter is required or\n'soft' library types and optional for 'hard' and 'stdcell'\nlibrary types.\n(\\*.v, \\*.vh) = Verilog\n(\\*.vhd)      = VHDL\n(\\*.sv)       = SystemVerilog\n(\\*.c)        = C\n(\\*.cpp, .cc) = C++\n(\\*.py)       = Python",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library source files",
                    "signature": [],
                    "switch": "-library_source 'lib design <file>'",
                    "type": "[file]",
                    "value": []
                },
                "stackup": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_stackup 'mylib freepdk45 M10",
                        "api:  chip.set('library','mylib','freepdk45','stackup','M10')"
                    ],
                    "help": "List of stackups supported for the specified PDK.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library stackups",
                    "signature": [],
                    "switch": "-library_stackup 'lib pdk <str>'",
                    "type": "[str]",
                    "value": []
                },
                "testbench": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_testbench 'mylib hello tb_top.v'",
                        "api: chip.set('library','mylib, 'hello','testbench','tb_top.v')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "A list of all library testbench sources. The files are read in order\nfrom first to last entered. File type is inferred from the file suffix:\n(\\*.v, \\*.vh) = Verilog\n(\\*.vhd)      = VHDL\n(\\*.sv)       = SystemVerilog\n(\\*.c)        = C\n(\\*.cpp, .cc) = C++\n(\\*.py)       = Python",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library testbench files",
                    "signature": [],
                    "switch": "-library_testbench 'lib design <file>'",
                    "type": "[file]",
                    "value": []
                },
                "testmodule": {
                    "defvalue": [],
                    "example": [
                        "cli: -libtary_testmodule 'mylib hello test_top'",
                        "api: chip.set('library','mylib','hello','testmodule', 'test_top')"
                    ],
                    "help": "Top level test module specified on a per design basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library testbench top module",
                    "signature": [],
                    "switch": "-library_testmodule 'lib design <str>'",
                    "type": "[str]",
                    "value": []
                },
                "waveform": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_waveform 'mylib hello mytrace.vcd'",
                        "api: chip.set('library','mylib','hello','waveform','mytrace.vcd')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Library waveform(s) used as a golden test vectors to ensure that\ncompilation transformations do not modify the functional behavior of\nthe source code. The waveform file must be compatible with the\ntestbench and compilation flow tools. The wavefor is supplied\non a per design basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library golden waveforms",
                    "signature": [],
                    "switch": "-library_waveform 'lib design <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "design": {
                "defvalue": [],
                "example": [
                    "cli: -library_design 'mylib mytop'",
                    "api: chip.set('library','mylib','design','mytop')"
                ],
                "help": "List of complete design functions within the library that can\nbe instantiated directly by the caller.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library designs",
                "signature": [],
                "switch": "-library_design 'lib <str>'",
                "type": "[str]",
                "value": []
            },
            "dir": {
                "default": {
                    "default": {
                        "default": {
                            "defvalue": [],
                            "example": [
                                "cli: -library_dir 'lib atool db 10M ~/libdb'",
                                "api: chip.set('library','lib','dir','atool','db',10M,'~/libdb')"
                            ],
                            "help": "List of named dirs specified on a per tool and per stackup basis.\nThe parameter should only be used for specifying dirs that are\nnot directly supported by the Library schema.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library named directory",
                            "signature": [],
                            "switch": "-library_dir 'lib tool key stackup <dir>'",
                            "type": "[dir]",
                            "value": []
                        }
                    }
                }
            },
            "file": {
                "default": {
                    "default": {
                        "default": {
                            "author": [],
                            "copy": "false",
                            "date": [],
                            "defvalue": [],
                            "example": [
                                "cli: -library_file 'lib atool db 10M ~/libdb'",
                                "api: chip.set('library','lib','file','atool','db',10M,'~/libdb')"
                            ],
                            "filehash": [],
                            "hashalgo": "sha256",
                            "help": "List of named files specified on a per tool and per stackup basis.\nThe parameter should only be used for specifying files that are\nnot directly supported by the Library schema.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library named file",
                            "signature": [],
                            "switch": "-library_file 'lib tool key stackup <file>'",
                            "type": "[file]",
                            "value": []
                        }
                    }
                }
            },
            "gds": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_gds 'mylib 10M mylib.gds'",
                        "api: chip.set('library','mylib','gds','10M','mylib.gds')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library GDS layout files specified on a\nper stackup basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library GDS layout files",
                    "signature": [],
                    "switch": "-library_gds 'lib stackup <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "gerber": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_gerber 'mylib 10M mylib.gerber'",
                        "api: chip.set('library','mylib','gerber','10M','mylib.gerber')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library GERBER layout files specified on a\nper stackup basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library GERBER layout files",
                    "signature": [],
                    "switch": "-library_gerber 'lib stackup <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "lef": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_lef 'mylib 10M mylib.lef'",
                        "api: chip.set('library','mylib','lef','10M','mylib.lef')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library LEF layout files specified on a\nper stackup basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library LEF layout files",
                    "signature": [],
                    "switch": "-library_lef 'lib stackup <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "model": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_model_gem5 'mylib model.gem5'",
                        "api: chip.set('library','mylib','model',gem5,'model.gem5')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library gem5 models.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library gem5 model",
                    "signature": [],
                    "switch": "-library_model_gem5 'lib <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "netlist": {
                "cdl": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_cdl_netlist 'mylib cdl mylib.cdl'",
                        "api: chip.set('library','mylib','netlist','cdl','mylib.cdl')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the cdl format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library cdl netlist",
                    "signature": [],
                    "switch": "-library_cdl_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "edif": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_edif_netlist 'mylib cdl mylib.edif'",
                        "api: chip.set('library','mylib','netlist','edif','mylib.edif')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the edif format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library edif netlist",
                    "signature": [],
                    "switch": "-library_edif_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "hspice": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_hspice_netlist 'mylib cdl mylib.hspice'",
                        "api: chip.set('library','mylib','netlist','hspice','mylib.hspice')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the hspice format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library hspice netlist",
                    "signature": [],
                    "switch": "-library_hspice_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "pspice": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_pspice_netlist 'mylib cdl mylib.pspice'",
                        "api: chip.set('library','mylib','netlist','pspice','mylib.pspice')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the pspice format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library pspice netlist",
                    "signature": [],
                    "switch": "-library_pspice_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "spectre": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_spectre_netlist 'mylib cdl mylib.spectre'",
                        "api: chip.set('library','mylib','netlist','spectre','mylib.spectre')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the spectre format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library spectre netlist",
                    "signature": [],
                    "switch": "-library_spectre_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "verilog": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_verilog_netlist 'mylib cdl mylib.verilog'",
                        "api: chip.set('library','mylib','netlist','verilog','mylib.verilog')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the verilog format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library verilog netlist",
                    "signature": [],
                    "switch": "-library_verilog_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "vhdl": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_vhdl_netlist 'mylib cdl mylib.vhdl'",
                        "api: chip.set('library','mylib','netlist','vhdl','mylib.vhdl')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "List of library netlists in the vhdl format.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library vhdl netlist",
                    "signature": [],
                    "switch": "-library_vhdl_netlist 'lib <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "nldm": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_nldm 'lib ss lib ss.lib.gz'",
                            "api: chip.set('library','lib','nldm','ss','lib','ss.lib.gz')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepaths to NLDM models. Timing files are specified\nper lib, corner, and filetype basis. Acceptable file formats\ninclude 'lib', 'lib.gz', and 'ldb'.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library NLDM timing model",
                        "signature": [],
                        "switch": "-library_nldm 'lib corner filetype <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "package": {
                "author": {
                    "default": {
                        "email": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_email 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','email','wiley@acme.com')"
                            ],
                            "help": "Library package author email provided with full name as key and\nemail as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author email",
                            "signature": null,
                            "switch": "-library_package_author_email 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        },
                        "location": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_location 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','location','wiley@acme.com')"
                            ],
                            "help": "Library package author location provided with full name as key and\nlocation as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author location",
                            "signature": null,
                            "switch": "-library_package_author_location 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        },
                        "name": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_name 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','name','wiley@acme.com')"
                            ],
                            "help": "Library package author name provided with full name as key and\nname as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author name",
                            "signature": null,
                            "switch": "-library_package_author_name 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        },
                        "organization": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_organization 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','organization','wiley@acme.com')"
                            ],
                            "help": "Library package author organization provided with full name as key and\norganization as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author organization",
                            "signature": null,
                            "switch": "-library_package_author_organization 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        },
                        "publickey": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_publickey 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','publickey','wiley@acme.com')"
                            ],
                            "help": "Library package author publickey provided with full name as key and\npublickey as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author publickey",
                            "signature": null,
                            "switch": "-library_package_author_publickey 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        },
                        "username": {
                            "defvalue": null,
                            "example": [
                                "cli: -library_package_author_username 'lib wiley wiley@acme.com'",
                                "api: chip.set('library', 'lib', 'package','author','wiley','username','wiley@acme.com')"
                            ],
                            "help": "Library package author username provided with full name as key and\nusername as value.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "Library package author username",
                            "signature": null,
                            "switch": "-library_package_author_username 'lib  userid <str>'",
                            "type": "str",
                            "value": null
                        }
                    }
                },
                "dependency": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_dependency 'lib hell0 1.0'",
                            "api: chip.set('library', 'lib', 'package','dependency','hello', '1.0')"
                        ],
                        "help": "Library package dependencies specified as a key value pair.\nVersions shall follow the semver standard.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package version dependancies",
                        "signature": [],
                        "switch": "-library_package_dependency 'lib <str>'",
                        "type": "[str]",
                        "value": []
                    }
                },
                "description": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_description 'lib Yet another cpu'",
                        "api: chip.set('library', 'lib', 'package','description','Yet another cpu')"
                    ],
                    "help": "Library package short one line description for package\nmanagers and summary reports.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package description",
                    "signature": null,
                    "switch": "-library_package_description 'lib <str>'",
                    "type": "str",
                    "value": null
                },
                "doc": {
                    "datasheet": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_datasheet 'lib datasheet.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',datasheet,'datasheet.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Library package list of datasheet documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package datasheet document",
                        "signature": [],
                        "switch": "-library_package_doc_datasheet 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "homepage": {
                        "defvalue": null,
                        "example": [
                            "cli: -library_package_doc_homepage 'lib index.html'",
                            "api: chip.set('library', 'lib', 'package','doc', 'homepage','index.html')"
                        ],
                        "help": "Library package documentation homepage. Filepath to design docs homepage.\nComplex designs can can include a long non standard list of\ndocuments dependent.  A single html entry point can be used to\npresent an organized documentation dashboard to the designer.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package documentation homepage",
                        "signature": null,
                        "switch": "-library_package_doc_homepage 'lib <str>'",
                        "type": "str",
                        "value": null
                    },
                    "quickstart": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_quickstart 'lib quickstart.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',quickstart,'quickstart.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Library package list of quickstart documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package quickstart document",
                        "signature": [],
                        "switch": "-library_package_doc_quickstart 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "reference": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_reference 'lib reference.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',reference,'reference.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Library package list of reference documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package reference document",
                        "signature": [],
                        "switch": "-library_package_doc_reference 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "releasenotes": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_releasenotes 'lib releasenotes.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',releasenotes,'releasenotes.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Library package list of releasenotes documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package releasenotes document",
                        "signature": [],
                        "switch": "-library_package_doc_releasenotes 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "signoff": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_signoff 'lib signoff.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',signoff,'signoff.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Library package list of signoff documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package signoff document",
                        "signature": [],
                        "switch": "-library_package_doc_signoff 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "testplan": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_testplan 'lib testplan.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',testplan,'testplan.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Library package list of testplan documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package testplan document",
                        "signature": [],
                        "switch": "-library_package_doc_testplan 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "tutorial": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_tutorial 'lib tutorial.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',tutorial,'tutorial.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Library package list of tutorial documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package tutorial document",
                        "signature": [],
                        "switch": "-library_package_doc_tutorial 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    },
                    "userguide": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_package_doc_userguide 'lib userguide.pdf'",
                            "api: chip.set('library', 'lib', 'package','doc',userguide,'userguide.pdf')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Library package list of userguide documents.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library package userguide document",
                        "signature": [],
                        "switch": "-library_package_doc_userguide 'lib <str>'",
                        "type": "[file]",
                        "value": []
                    }
                },
                "homepage": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_homepage 'lib index.html'",
                        "api: chip.set('library', 'lib', 'package','homepage','index.html')"
                    ],
                    "help": "Library package homepage.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package project homepage",
                    "signature": null,
                    "switch": "-library_package_homepage 'lib <str>'",
                    "type": "str",
                    "value": null
                },
                "keyword": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_keyword 'lib cpu'",
                        "api: chip.set('library', 'lib', 'package','keyword','cpu')"
                    ],
                    "help": "Library package keyword(s) used to characterize package.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package keyword",
                    "signature": null,
                    "switch": "-library_package_keyword 'lib <str>'",
                    "type": "str",
                    "value": null
                },
                "license": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_license 'lib Apache-2.0'",
                        "api: chip.set('library', 'lib', 'package','license','Apache-2.0')"
                    ],
                    "help": "Library package list of SPDX license identifiers.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package license identifiers",
                    "signature": [],
                    "switch": "-library_package_license 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "licensefile": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_licensefile 'lib ./LICENSE'",
                        "api: chip.set('library', 'lib', 'package','licensefile','./LICENSE')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Library package list of license files for library to be\napplied in cases when a SPDX identifier is not available.\n(eg. proprietary licenses).list of SPDX license identifiers.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package license files",
                    "signature": [],
                    "switch": "-library_package_licensefile 'lib <file>'",
                    "type": "[file]",
                    "value": []
                },
                "location": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_location 'lib mars'",
                        "api: chip.set('library', 'lib', 'package','location','mars')"
                    ],
                    "help": "Library package country of origin specified as standardized\ninternational country codes. The field can be left blank\nif the location is unknown or global.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package location",
                    "signature": [],
                    "switch": "-library_package_location 'lib <file>'",
                    "type": "[str]",
                    "value": []
                },
                "name": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_name 'lib yac'",
                        "api: chip.set('library', 'lib', 'package','name','yac')"
                    ],
                    "help": "Library package name.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package name",
                    "signature": null,
                    "switch": "-library_package_name 'lib <str>'",
                    "type": "str",
                    "value": null
                },
                "organization": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_organization 'lib humanity'",
                        "api: chip.set('library', 'lib', 'package','organization','humanity')"
                    ],
                    "help": "Library package sponsoring organization. The field can be left\nblank if not applicable.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package sponsoring organization",
                    "signature": [],
                    "switch": "-library_package_organzation 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "publickey": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_publickey 'lib 6EB695706EB69570'",
                        "api: chip.set('library', 'lib', 'package','publickey','6EB695706EB69570')"
                    ],
                    "help": "Library package public project key.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package public key",
                    "signature": null,
                    "switch": "-library_package_publickey 'lib <str>'",
                    "type": "str",
                    "value": null
                },
                "repo": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_repo 'lib git@github.com:aolofsson/oh.git'",
                        "api: chip.set('library', 'lib', 'package','repo','git@github.com:aolofsson/oh.git')"
                    ],
                    "help": "Library package IP address to source code repository.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package code repository",
                    "signature": [],
                    "switch": "-library_package_repo 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "target": {
                    "defvalue": [],
                    "example": [
                        "cli: -library_package_target 'lib asicflow_freepdk45'",
                        "api: chip.set('library', 'lib', 'package','target','asicflow_freepdk45')"
                    ],
                    "help": "Library package list of qualified compilation targets.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package qualified targets",
                    "signature": [],
                    "switch": "-library_package_target 'lib <str>'",
                    "type": "[str]",
                    "value": []
                },
                "version": {
                    "defvalue": null,
                    "example": [
                        "cli: -library_package_version 'lib 1.0'",
                        "api: chip.set('library', 'lib', 'package','version','1.0')"
                    ],
                    "help": "Library package version. Can be a branch, tag, commit hash,\nor a semver compatible version.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library package version",
                    "signature": null,
                    "switch": "-library_package_version 'lib <str>'",
                    "type": "str",
                    "value": null
                }
            },
            "pdk": {
                "defvalue": [],
                "example": [
                    "cli: -library_pdk 'mylib freepdk45",
                    "api:  chip.set('library', 'mylib', 'pdk', 'freepdk45')"
                ],
                "help": "List of PDK modules supported by the library. The\nparameter is required for technology hardened ASIC libraries.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library PDK",
                "signature": [],
                "switch": "-library_pdk 'lib <str>'",
                "type": "[str]",
                "value": []
            },
            "pgmetal": {
                "defvalue": null,
                "example": [
                    "cli: -library_pgmetal 'mylib m1'",
                    "api: chip.set('library','mylib','pgmetal','m1')"
                ],
                "help": "Top metal layer used for power and ground routing within the\nlibrary. The parameter can be used to guide cell power grid\nhookup by APR tools.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library PG layer",
                "signature": null,
                "switch": "-library_pgmetal 'lib <str>'",
                "type": "str",
                "value": null
            },
            "scm": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -library_scm 'lib ss lib ss.lib.gz'",
                            "api: chip.set('library','lib','scm','ss','lib','ss.lib.gz')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Filepaths to SCM models. Timing files are specified\nper lib, corner, and filetype basis. Acceptable file formats\ninclude 'lib', 'lib.gz', and 'ldb'.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library SCM timing model",
                        "signature": [],
                        "switch": "-library_scm 'lib corner filetype <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "site": {
                "default": {
                    "size": {
                        "defvalue": null,
                        "example": [
                            "cli: -library_site_size 'mylib core (1.0,1.0)'",
                            "api: chip.set('library','mylib','site','core','size',(1.0,1.0))"
                        ],
                        "help": "Size of the library size described as a (width, height) tuple in\nmicrons.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library site size",
                        "signature": null,
                        "switch": "-library_site_size 'lib name <str>'",
                        "type": "(float,float)",
                        "value": null
                    },
                    "symmetry": {
                        "defvalue": null,
                        "example": [
                            "cli: -library_site_symmetry 'mylib core X Y'",
                            "api: chip.set('library','mylib','site','core','symmetry','X Y')"
                        ],
                        "help": " Site flip-symmetry based on LEF standard definition. 'X' implies\nsymmetric about the x axis, 'Y' implies symmetry about the y axis, and\n'X Y' implies symmetry about the x and y axis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Library site symmetry",
                        "signature": null,
                        "switch": "-library_site_symmetry 'lib name <str>'",
                        "type": "str",
                        "value": null
                    }
                }
            },
            "tag": {
                "defvalue": [],
                "example": [
                    "cli: -library_tag 'mylib virtual'",
                    "api: chip.set('library','mylib','tag','virtual')"
                ],
                "help": "Marks a library with a set of tags that can be used by the designer\nand EDA tools for optimization purposes. The tags are meant to cover\nfeatures not currently supported by built in EDA optimization flows,\nbut which can be queried through EDA tool TCL commands and lists.\nThe example below demonstrates tagging the whole library as\nvirtual.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library tags",
                "signature": [],
                "switch": "-library_tag 'lib <str>'",
                "type": "[str]",
                "value": []
            },
            "techmap": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -library_techmap 'lib mylib yosys map.v'",
                        "api: chip.set('library', 'mylib', 'techmap', 'yosys','map.v')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Filepaths specifying mappings from tool-specific generic cells to\nlibrary cells.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Library techmap file",
                    "signature": [],
                    "switch": "-library_techmap 'lib tool <file>'",
                    "type": "[file]",
                    "value": []
                }
            },
            "type": {
                "defvalue": null,
                "example": [
                    "cli: -library_type 'mylib logiclib'",
                    "api: chip.set('library','mylib','type','logiclib')"
                ],
                "help": "Type of the library being configured. A 'logiclib' type is reserved\nfor fixed height cell libraries. A 'soft' type indicates a library\nthat is provided as target agnostic source code, and a 'hard'\ntype indicates a non-logiclib target specificlibrary.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Library type",
                "signature": null,
                "switch": "-library_type 'lib <str>'",
                "type": "str",
                "value": null
            }
        }
    },
    "loglevel": {
        "defvalue": "WARNING",
        "example": [
            "cli: -loglevel INFO",
            "api: chip.set('loglevel', 'INFO')"
        ],
        "help": "Provides explicit control over the level of debug logging printed.\nValid entries include INFO, DEBUG, WARNING, ERROR.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Logging level",
        "signature": null,
        "switch": "-loglevel <str>",
        "type": "str",
        "value": "WARNING"
    },
    "mcmm": {
        "default": {
            "check": {
                "defvalue": [],
                "example": [
                    "cli: -mcmm_check 'worst check setup'",
                    "api: chip.add('mcmm','worst','check','setup')"
                ],
                "help": "List of checks for to perform for the scenario. The checks must\nalign with the capabilities of the EDA tools and flow being used.\nChecks generally include objectives like meeting setup and hold goals\nand minimize power. Standard check names include setup, hold, power,\nnoise, reliability.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Scenario checks",
                "signature": [],
                "switch": "-mcmm_check 'scenario <str>'",
                "type": "[str]",
                "value": []
            },
            "constraint": {
                "author": [],
                "copy": "true",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -mcmm_constraint 'worst hello.sdc'",
                    "api: chip.set('mcmm','worst','constraint', 'hello.sdc')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "List of timing constraint files to use for the scenario. The\nvalues are combined with any constraints specified by the design\n'constraint' parameter. If no constraints are found, a default\nconstraint file is used based on the clock definitions.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Scenario constraints files",
                "signature": [],
                "switch": "-mcmm_constraint 'scenario <file>'",
                "type": "[file]",
                "value": []
            },
            "libcorner": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_libcorner 'worst ttt'",
                    "api: chip.set('mcmm', 'worst', 'libcorner', 'ttt')"
                ],
                "help": "Library corner applied to the scenario to scale\nlibrary timing models based on the libcorner value for models\nthat support it. The parameter is ignored for libraries that\nhave one hard coded model per libcorner.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Scenario library corner",
                "signature": null,
                "switch": "-mcmm_libcorner 'scenario <str>'",
                "type": "str",
                "value": null
            },
            "mode": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_mode 'worst test'",
                    "api: chip.set('mcmm',  'worst','mode', 'test')"
                ],
                "help": "Operating mode for the scenario. Operating mode strings\ncan be values such as test, functional, standby.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Scenario operating mode",
                "signature": null,
                "switch": "-mcmm_mode 'scenario <str>'",
                "type": "str",
                "value": null
            },
            "opcond": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_opcond 'worst typical_1.0'",
                    "api: chip.set('mcmm', 'worst', 'opcond',  'typical_1.0')"
                ],
                "help": "Operating condition applied to the scenario. The value\ncan be used to access specific conditions within the library\ntiming models from the 'logiclib' timing models.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Scenario operating condition",
                "signature": null,
                "switch": "-mcmm_opcond 'scenario <str>'",
                "type": "str",
                "value": null
            },
            "pexcorner": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_pexcorner 'worst max'",
                    "api: chip.set('mcmm', 'worst', 'pexcorner', 'max')"
                ],
                "help": "Parasitic corner applied to the scenario. The\n'pexcorner' string must match a corner found in the pdk\npexmodel setup.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Scenario pex corner",
                "signature": null,
                "switch": "-mcmm_pexcorner 'scenario <str>'",
                "type": "str",
                "value": null
            },
            "temperature": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_temperature 'worst 125'",
                    "api: chip.set('mcmm', 'worst', 'temperature','125')"
                ],
                "help": "Chip temperature applied to the scenario specified in\ndegrees Celsius.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Scenario temperature",
                "signature": null,
                "switch": "-mcmm_temperature 'scenario <float>'",
                "type": "float",
                "value": null
            },
            "voltage": {
                "defvalue": null,
                "example": [
                    "cli: -mcmm_voltage 'worst 0.9'",
                    "api: chip.set('mcmm', 'worst','voltage', '0.9')"
                ],
                "help": "Operating voltage applied to the scenario,\nspecified in Volts.",
                "lock": "false",
                "require": null,
                "scope": "job",
                "shorthelp": "Scenario voltage level",
                "signature": null,
                "switch": "-mcmm_voltage 'scenario <float>'",
                "type": "float",
                "value": null
            }
        }
    },
    "metric": {
        "default": {
            "default": {
                "averagepower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_averagepower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','averagepower','real',0.01)"
                        ],
                        "help": "Metric tracking the average workload power of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power averagepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the approprate\nfootnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: averagepower",
                        "signature": null,
                        "switch": "-metric_averagepower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "brams": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_brams 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','brams','real',100)"
                        ],
                        "help": "Metric tracking the total FPGA BRAM tiles used by the design as reported\nby the implementation tool. There is no standardized definition\nfor this metric across vendors, so metric comparisons can\ngenerally only be done between runs on identical tools and\ndevice families.",
                        "lock": "false",
                        "require": "fpga",
                        "scope": "job",
                        "shorthelp": "Metric: FPGA BRAM tiles",
                        "signature": null,
                        "switch": "-metric_brams 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "buffers": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_buffers 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','buffers','real', 50)"
                        ],
                        "help": "Metric tracking the total number of buffer and inverter instances in the design\non a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: buffers",
                        "signature": null,
                        "switch": "-metric_buffers 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "cellarea": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_cellarea 'place 0 goal 100.00'",
                            "api: chip.set('metric','place','0','cellarea','real',100.00)"
                        ],
                        "help": "Metric tracking the total cell area (ignoring fillers) occupied by the design. The\nmetric is specified in um^2.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: cellarea",
                        "signature": null,
                        "switch": "-metric_cellarea 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "cells": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_cells 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','cells','real', 50)"
                        ],
                        "help": "Metric tracking the total number of cell instances in the design\non a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: cells",
                        "signature": null,
                        "switch": "-metric_cells 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "coverage": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_coverage 'place 0 goal 99.9'",
                            "api: chip.set('metric','place','0','coverage','goal',99.9)"
                        ],
                        "help": "Metric tracking the test coverage in the design expressed as a percentage\nwith 100 meaning full coverage. The meaning of the metric depends on the\ntask being executed. It can refer to code coverage, feature coverage,\nstuck at fault coverage.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: coverage",
                        "signature": null,
                        "switch": "-metric_coverage 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "dozepower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_dozepower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','dozepower','real',0.01)"
                        ],
                        "help": "Metric tracking the power consumed while in low frequency operating mode of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power dozepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the approprate\nfootnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: dozepower",
                        "signature": null,
                        "switch": "-metric_dozepower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "drvs": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_drvs 'dfm 0 goal 0'",
                            "api: chip.set('metric','dfm','0','drvs','real',0)"
                        ],
                        "help": "Metric tracking the total number of design rule violations on a\nper step and index basis.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: total drvs",
                        "signature": null,
                        "switch": "-metric_drvs 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "dsps": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_dsps 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','dsps','real',100)"
                        ],
                        "help": "Metric tracking the total FPGA DSP slices used by the design as reported\nby the implementation tool. There is no standardized definition\nfor this metric across vendors, so metric comparisons can\ngenerally only be done between runs on identical tools and\ndevice families.",
                        "lock": "false",
                        "require": "fpga",
                        "scope": "job",
                        "shorthelp": "Metric: FPGA DSP slices",
                        "signature": null,
                        "switch": "-metric_dsps 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "errors": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_errors 'dfm 0 goal 0'",
                            "api: chip.set('metric','dfm','0','errors','real',0)"
                        ],
                        "help": "Metric tracking the total number of errors on a\nper step and index basis.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: total errors",
                        "signature": null,
                        "switch": "-metric_errors 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "exetime": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_exetime 'dfm 0 goal 10.0'",
                            "api: chip.set('metric','dfm','0','exetime','real, 10.0)"
                        ],
                        "help": "Metric tracking time spent by the eda executable 'exe' on a\nper step and index basis. It does not include the siliconcompiler\nruntime overhead or time waitig for I/O operations and\ninter-processor communication to complete. The metric unit\nis seconds.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: exetime",
                        "signature": null,
                        "switch": "-metric_exetime 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "holdpaths": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_holdpaths 'place 0 goal 10'",
                            "api: chip.set('metric','place','0','holdpaths','real',10)"
                        ],
                        "help": "Metric tracking the total number of timing paths violating hold\nconstraints.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: holdpaths",
                        "signature": null,
                        "switch": "-metric_holdpaths 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "holdslack": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_holdslack 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','holdslack','real', 0.01)"
                        ],
                        "help": "Metric tracking the worst hold slack (positive or negative) on a per step and index basis.\nMetric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: holdslack",
                        "signature": null,
                        "switch": "-metric_holdslack 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "holdtns": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_holdtns 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','holdtns','real', 0.01)"
                        ],
                        "help": "Metric tracking the total negative hold slack (TNS) on a per step and index basis.\nMetric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: holdtns",
                        "signature": null,
                        "switch": "-metric_holdtns 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "holdwns": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_holdwns 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','holdwns','real', 0.01)"
                        ],
                        "help": "Metric tracking the worst negative hold slack (positive values truncated to zero) on a per step and index basis.\nMetric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: holdwns",
                        "signature": null,
                        "switch": "-metric_holdwns 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "idlepower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_idlepower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','idlepower','real',0.01)"
                        ],
                        "help": "Metric tracking the power while not performing useful work of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power idlepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the approprate\nfootnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: idlepower",
                        "signature": null,
                        "switch": "-metric_idlepower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "irdrop": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_irdrop 'place 0 real 0.05'",
                            "api: chip.set('metric','place','0','irdrop','real',0.05)"
                        ],
                        "help": "Metric tracking the peak IR drop in the design based on extracted\npower and ground rail parasitics, library power models, and\nswitching activity. The switching activity calculated on a per\nnode basis is taken from one of three possible sources, in order\nof priority: VCD file, SAIF file, 'activityfactor' parameter.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: peak IR drop",
                        "signature": null,
                        "switch": "-metric_irdrop 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "leakagepower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_leakagepower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','leakagepower','real',0.01)"
                        ],
                        "help": "Metric tracking the leakage power with rails active but without any dynamic switching activity of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power leakagepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the approprate\nfootnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: leakagepower",
                        "signature": null,
                        "switch": "-metric_leakagepower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "luts": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_luts 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','luts','real',100)"
                        ],
                        "help": "Metric tracking the total FPGA LUTs used by the design as reported\nby the implementation tool. There is no standardized definition\nfor this metric across vendors, so metric comparisons can\ngenerally only be done between runs on identical tools and\ndevice families.",
                        "lock": "false",
                        "require": "fpga",
                        "scope": "job",
                        "shorthelp": "Metric: FPGA LUTs",
                        "signature": null,
                        "switch": "-metric_luts 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "macros": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_macros 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','macros','real', 50)"
                        ],
                        "help": "Metric tracking the total number of macros in the design\non a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: macros",
                        "signature": null,
                        "switch": "-metric_macros 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "memory": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_memory 'dfm 0 goal 10e9'",
                            "api: chip.set('metric','dfm','0','memory','real, 10e9)"
                        ],
                        "help": "Metric tracking total peak program memory footprint on a per\nstep and index basis, specified in bytes.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: memory",
                        "signature": null,
                        "switch": "-metric_memory 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "nets": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_nets 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','nets','real', 50)"
                        ],
                        "help": "Metric tracking the total number of nets in the design\non a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: nets",
                        "signature": null,
                        "switch": "-metric_nets 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "overflow": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_overflow 'place 0 goal 0'",
                            "api: chip.set('metric','place','0','overflow','real', 50)"
                        ],
                        "help": "Metric tracking the total number of overflow tracks for the routing\non per step and index basis. Any non-zero number suggests an over\ncongested design. To analyze where the congestion is occurring\ninspect the router log files for detailed per metal overflow\nreporting and open up the design to find routing hotspots.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: overflow",
                        "signature": null,
                        "switch": "-metric_overflow 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "peakpower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_peakpower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','peakpower','real',0.01)"
                        ],
                        "help": "Metric tracking the worst case total peak power of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power peakpower metric tries to capture the data that would\nusually be reflected inside a datasheet given the approprate\nfootnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: peakpower",
                        "signature": null,
                        "switch": "-metric_peakpower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "pins": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_pins 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','pins','real', 50)"
                        ],
                        "help": "Metric tracking the total number of pins in the design\non a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: pins",
                        "signature": null,
                        "switch": "-metric_pins 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "registers": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_registers 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','registers','real', 50)"
                        ],
                        "help": "Metric tracking the total number of register instances in the design\non a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: registers",
                        "signature": null,
                        "switch": "-metric_registers 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "security": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_security 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','security','goal',100)"
                        ],
                        "help": "Metric tracking the level of security (1/vulnerability) of the design.\nA completely secure design would have a score of 100. There is no\nabsolute scale for the security metrics (like with power, area, etc)\nso the metric will be task and tool dependent.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: security",
                        "signature": null,
                        "switch": "-metric_security 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "setuppaths": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_setuppaths 'place 0 goal 10'",
                            "api: chip.set('metric','place','0','setuppaths','real',10)"
                        ],
                        "help": "Metric tracking the total number of timing paths violating setup\nconstraints.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: setuppaths",
                        "signature": null,
                        "switch": "-metric_setuppaths 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "setupslack": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_setupslack 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','setupslack','real', 0.01)"
                        ],
                        "help": "Metric tracking the worst setup slack (positive or negative) on a per step and index basis.\nMetric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: setupslack",
                        "signature": null,
                        "switch": "-metric_setupslack 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "setuptns": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_setuptns 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','setuptns','real', 0.01)"
                        ],
                        "help": "Metric tracking the total negative setup slack (TNS) on a per step and index basis.\nMetric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: setuptns",
                        "signature": null,
                        "switch": "-metric_setuptns 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "setupwns": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_setupwns 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','setupwns','real', 0.01)"
                        ],
                        "help": "Metric tracking the worst negative setup slack (positive values truncated to zero) on a per step and index basis.\nMetric unit is nanoseconds.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: setupwns",
                        "signature": null,
                        "switch": "-metric_setupwns 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "sleeppower": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_sleeppower 'place 0 goal 0.01'",
                            "api: chip.set('metric','place','0','sleeppower','real',0.01)"
                        ],
                        "help": "Metric tracking the power consumed with some or all power rails gated off of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power sleeppower metric tries to capture the data that would\nusually be reflected inside a datasheet given the approprate\nfootnote conditions.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: sleeppower",
                        "signature": null,
                        "switch": "-metric_sleeppower 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "tasktime": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_tasktime 'dfm 0 goal 10.0'",
                            "api: chip.set('metric','dfm','0','tasktime','real, 10.0)"
                        ],
                        "help": "Metric trakcing the total amount of time spent on a task from\nbeginning to end, including data transfers and pre/post processing.\nThe metric unit is seconds.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: tasktime",
                        "signature": null,
                        "switch": "-metric_tasktime 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "totalarea": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_totalarea 'place 0 goal 100.00'",
                            "api: chip.set('metric','place','0','totalarea','real',100.00)"
                        ],
                        "help": "Metric tracking the total physical die area occupied by the design. The\nmetric is specified in um^2.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: totalarea",
                        "signature": null,
                        "switch": "-metric_totalarea 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                },
                "transistors": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_transistors 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','transistors','real', 50)"
                        ],
                        "help": "Metric tracking the total number of transistors in the design\non a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: transistors",
                        "signature": null,
                        "switch": "-metric_transistors 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "unconstrained": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_unconstrained 'dfm 0 goal 0'",
                            "api: chip.set('metric','dfm','0','unconstrained','real',0)"
                        ],
                        "help": "Metric tracking the total number of unconstrained timing paths on a\nper step and index basis.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: total unconstrained",
                        "signature": null,
                        "switch": "-metric_unconstrained 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "utilization": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_utilization 'place 0 goal 50.00'",
                            "api: chip.set('metric','place','0','utilization','real',50.00)"
                        ],
                        "help": "Metric tracking the area utilization of the design calculated as\n100 * (cellarea/totalarea).",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: area utilization",
                        "signature": null,
                        "switch": "-metric_utilization step index group <float>",
                        "type": "float",
                        "value": null
                    }
                },
                "vias": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_vias 'place 0 goal 100'",
                            "api: chip.set('metric','place','0','vias','real', 50)"
                        ],
                        "help": "Metric tracking the total number of vias in the design\non a per step and index basis.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: vias",
                        "signature": null,
                        "switch": "-metric_vias 'step index group <float>'",
                        "type": "int",
                        "value": null
                    }
                },
                "warnings": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_warnings 'dfm 0 goal 0'",
                            "api: chip.set('metric','dfm','0','warnings','real',0)"
                        ],
                        "help": "Metric tracking the total number of warnings on a\nper step and index basis.",
                        "lock": "false",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Metric: total warnings",
                        "signature": null,
                        "switch": "-metric_warnings 'step index group <int>'",
                        "type": "int",
                        "value": null
                    }
                },
                "wirelength": {
                    "default": {
                        "defvalue": null,
                        "example": [
                            "cli: -metric_wirelength 'place 0 goal 100.0'",
                            "api: chip.set('metric','place','0','wirelength','real', 50.0)"
                        ],
                        "help": "Metric tracking the total wirelength of the design on a per step\nand index basis. The unit is meters.",
                        "lock": "false",
                        "require": "asic",
                        "scope": "job",
                        "shorthelp": "Metric: wirelength",
                        "signature": null,
                        "switch": "-metric_wirelength 'step index group <float>'",
                        "type": "float",
                        "value": null
                    }
                }
            }
        }
    },
    "metricoff": {
        "defvalue": [],
        "example": [
            "cli: -metricoff 'wirelength'",
            "api: chip.set('metricoff','wirelength')"
        ],
        "help": "List of metrics to supress when printing out the run\nsummary.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Metric summary filter",
        "signature": [],
        "switch": "-metricoff '<str>'",
        "type": "[str]",
        "value": []
    },
    "mode": {
        "defvalue": null,
        "example": [
            "cli: -mode asic",
            "api: chip.set('mode','asic')"
        ],
        "help": "Sets the operating mode of the compiler. Valid modes are:\nasic: RTL to GDS ASIC compilation\nfpga: RTL to bitstream FPGA compilation\nsim: simulation to verify design and compilation",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Compilation mode",
        "signature": null,
        "switch": "-mode <str>",
        "type": "str",
        "value": null
    },
    "msgcontact": {
        "defvalue": [],
        "example": [
            "cli: -msgcontact 'wile.e.coyote@acme.com'",
            "api: chip.set('msgcontact','wile.e.coyote@acme.com')"
        ],
        "help": "A list of phone numbers or email addresses to message\non a event event within the msg_event param. Actual\nsupport for email and phone messages is platform\ndependent.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Message contact",
        "signature": [],
        "switch": "-msgcontact <str>",
        "type": "[str]",
        "value": []
    },
    "msgevent": {
        "defvalue": [],
        "example": [
            "cli: -msgevent export",
            "api: chip.set('msgevent','export')"
        ],
        "help": "A list of steps after which to notify a recipient. For\nexample if values of syn, place, cts are entered separate\nmessages would be sent after the completion of the syn,\nplace, and cts steps.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Message event trigger",
        "signature": [],
        "switch": "-msgevent <str>",
        "type": "[str]",
        "value": []
    },
    "nodisplay": {
        "defvalue": "false",
        "example": [
            "cli: -nodisplay",
            "api: chip.set('nodisplay', True)"
        ],
        "help": "The '-nodisplay' flag prevents SiliconCompiler from\nopening GUI windows such as the final metrics report.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Headless execution",
        "signature": null,
        "switch": "-nodisplay <bool>",
        "type": "bool",
        "value": "false"
    },
    "oformat": {
        "defvalue": null,
        "example": [
            "cli: -oformat gds",
            "api: chip.set('oformat', 'gds')"
        ],
        "help": "File format to use for writing the final siliconcompiler output to\ndisk. For cases, when only one output format exists, the 'oformat'\nparameter can be omitted. Examples of ASIC layout output formats\ninclude GDS and OASIS.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Output format",
        "signature": null,
        "switch": "-oformat <str>",
        "type": "str",
        "value": null
    },
    "optmode": {
        "defvalue": "O0",
        "example": [
            "cli: -O3",
            "api: chip.set('optmode','3')"
        ],
        "help": "The compiler has modes to prioritize run time and ppa. Modes\ninclude.\n\n(0) = Exploration mode for debugging setup\n(1) = Higher effort and better PPA than O0\n(2) = Higher effort and better PPA than O1\n(3) = Signoff quality. Better PPA and higher run times than O2\n(4-98) = Reserved (compiler/target dependent)\n(99) = Experimental highest possible effort, may be unstable",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Optimization mode",
        "signature": null,
        "switch": "-O<str>",
        "type": "str",
        "value": "O0"
    },
    "package": {
        "author": {
            "default": {
                "email": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_email 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','email','wiley@acme.com')"
                    ],
                    "help": "Package author email provided with full name as key and\nemail as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author email",
                    "signature": null,
                    "switch": "-package_author_email ' userid <str>'",
                    "type": "str",
                    "value": null
                },
                "location": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_location 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','location','wiley@acme.com')"
                    ],
                    "help": "Package author location provided with full name as key and\nlocation as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author location",
                    "signature": null,
                    "switch": "-package_author_location ' userid <str>'",
                    "type": "str",
                    "value": null
                },
                "name": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_name 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','name','wiley@acme.com')"
                    ],
                    "help": "Package author name provided with full name as key and\nname as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author name",
                    "signature": null,
                    "switch": "-package_author_name ' userid <str>'",
                    "type": "str",
                    "value": null
                },
                "organization": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_organization 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','organization','wiley@acme.com')"
                    ],
                    "help": "Package author organization provided with full name as key and\norganization as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author organization",
                    "signature": null,
                    "switch": "-package_author_organization ' userid <str>'",
                    "type": "str",
                    "value": null
                },
                "publickey": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_publickey 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','publickey','wiley@acme.com')"
                    ],
                    "help": "Package author publickey provided with full name as key and\npublickey as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author publickey",
                    "signature": null,
                    "switch": "-package_author_publickey ' userid <str>'",
                    "type": "str",
                    "value": null
                },
                "username": {
                    "defvalue": null,
                    "example": [
                        "cli: -package_author_username 'wiley wiley@acme.com'",
                        "api: chip.set(package,'author','wiley','username','wiley@acme.com')"
                    ],
                    "help": "Package author username provided with full name as key and\nusername as value.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package author username",
                    "signature": null,
                    "switch": "-package_author_username ' userid <str>'",
                    "type": "str",
                    "value": null
                }
            }
        },
        "dependency": {
            "default": {
                "defvalue": [],
                "example": [
                    "cli: -package_dependency 'hell0 1.0'",
                    "api: chip.set(package,'dependency','hello', '1.0')"
                ],
                "help": "Package dependencies specified as a key value pair.\nVersions shall follow the semver standard.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package version dependancies",
                "signature": [],
                "switch": "-package_dependency '<str>'",
                "type": "[str]",
                "value": []
            }
        },
        "description": {
            "defvalue": null,
            "example": [
                "cli: -package_description 'Yet another cpu'",
                "api: chip.set(package,'description','Yet another cpu')"
            ],
            "help": "Package short one line description for package\nmanagers and summary reports.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package description",
            "signature": null,
            "switch": "-package_description '<str>'",
            "type": "str",
            "value": null
        },
        "doc": {
            "datasheet": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_datasheet 'datasheet.pdf'",
                    "api: chip.set(package,'doc',datasheet,'datasheet.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Package list of datasheet documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package datasheet document",
                "signature": [],
                "switch": "-package_doc_datasheet '<str>'",
                "type": "[file]",
                "value": []
            },
            "homepage": {
                "defvalue": null,
                "example": [
                    "cli: -package_doc_homepage 'index.html'",
                    "api: chip.set(package,'doc', 'homepage','index.html')"
                ],
                "help": "Package documentation homepage. Filepath to design docs homepage.\nComplex designs can can include a long non standard list of\ndocuments dependent.  A single html entry point can be used to\npresent an organized documentation dashboard to the designer.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package documentation homepage",
                "signature": null,
                "switch": "-package_doc_homepage '<str>'",
                "type": "str",
                "value": null
            },
            "quickstart": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_quickstart 'quickstart.pdf'",
                    "api: chip.set(package,'doc',quickstart,'quickstart.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Package list of quickstart documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package quickstart document",
                "signature": [],
                "switch": "-package_doc_quickstart '<str>'",
                "type": "[file]",
                "value": []
            },
            "reference": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_reference 'reference.pdf'",
                    "api: chip.set(package,'doc',reference,'reference.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Package list of reference documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package reference document",
                "signature": [],
                "switch": "-package_doc_reference '<str>'",
                "type": "[file]",
                "value": []
            },
            "releasenotes": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_releasenotes 'releasenotes.pdf'",
                    "api: chip.set(package,'doc',releasenotes,'releasenotes.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Package list of releasenotes documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package releasenotes document",
                "signature": [],
                "switch": "-package_doc_releasenotes '<str>'",
                "type": "[file]",
                "value": []
            },
            "signoff": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_signoff 'signoff.pdf'",
                    "api: chip.set(package,'doc',signoff,'signoff.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Package list of signoff documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package signoff document",
                "signature": [],
                "switch": "-package_doc_signoff '<str>'",
                "type": "[file]",
                "value": []
            },
            "testplan": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_testplan 'testplan.pdf'",
                    "api: chip.set(package,'doc',testplan,'testplan.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Package list of testplan documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package testplan document",
                "signature": [],
                "switch": "-package_doc_testplan '<str>'",
                "type": "[file]",
                "value": []
            },
            "tutorial": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_tutorial 'tutorial.pdf'",
                    "api: chip.set(package,'doc',tutorial,'tutorial.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Package list of tutorial documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package tutorial document",
                "signature": [],
                "switch": "-package_doc_tutorial '<str>'",
                "type": "[file]",
                "value": []
            },
            "userguide": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -package_doc_userguide 'userguide.pdf'",
                    "api: chip.set(package,'doc',userguide,'userguide.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Package list of userguide documents.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Package userguide document",
                "signature": [],
                "switch": "-package_doc_userguide '<str>'",
                "type": "[file]",
                "value": []
            }
        },
        "homepage": {
            "defvalue": null,
            "example": [
                "cli: -package_homepage 'index.html'",
                "api: chip.set(package,'homepage','index.html')"
            ],
            "help": "Package homepage.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package project homepage",
            "signature": null,
            "switch": "-package_homepage '<str>'",
            "type": "str",
            "value": null
        },
        "keyword": {
            "defvalue": null,
            "example": [
                "cli: -package_keyword 'cpu'",
                "api: chip.set(package,'keyword','cpu')"
            ],
            "help": "Package keyword(s) used to characterize package.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package keyword",
            "signature": null,
            "switch": "-package_keyword '<str>'",
            "type": "str",
            "value": null
        },
        "license": {
            "defvalue": [],
            "example": [
                "cli: -package_license 'Apache-2.0'",
                "api: chip.set(package,'license','Apache-2.0')"
            ],
            "help": "Package list of SPDX license identifiers.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package license identifiers",
            "signature": [],
            "switch": "-package_license '<str>'",
            "type": "[str]",
            "value": []
        },
        "licensefile": {
            "author": [],
            "copy": "false",
            "date": [],
            "defvalue": [],
            "example": [
                "cli: -package_licensefile './LICENSE'",
                "api: chip.set(package,'licensefile','./LICENSE')"
            ],
            "filehash": [],
            "hashalgo": "sha256",
            "help": "Package list of license files for package to be\napplied in cases when a SPDX identifier is not available.\n(eg. proprietary licenses).list of SPDX license identifiers.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package license files",
            "signature": [],
            "switch": "-package_licensefile '<file>'",
            "type": "[file]",
            "value": []
        },
        "location": {
            "defvalue": [],
            "example": [
                "cli: -package_location 'mars'",
                "api: chip.set(package,'location','mars')"
            ],
            "help": "Package country of origin specified as standardized\ninternational country codes. The field can be left blank\nif the location is unknown or global.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package location",
            "signature": [],
            "switch": "-package_location '<file>'",
            "type": "[str]",
            "value": []
        },
        "name": {
            "defvalue": null,
            "example": [
                "cli: -package_name 'yac'",
                "api: chip.set(package,'name','yac')"
            ],
            "help": "Package name.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package name",
            "signature": null,
            "switch": "-package_name '<str>'",
            "type": "str",
            "value": null
        },
        "organization": {
            "defvalue": [],
            "example": [
                "cli: -package_organization 'humanity'",
                "api: chip.set(package,'organization','humanity')"
            ],
            "help": "Package sponsoring organization. The field can be left\nblank if not applicable.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package sponsoring organization",
            "signature": [],
            "switch": "-package_organzation '<str>'",
            "type": "[str]",
            "value": []
        },
        "publickey": {
            "defvalue": null,
            "example": [
                "cli: -package_publickey '6EB695706EB69570'",
                "api: chip.set(package,'publickey','6EB695706EB69570')"
            ],
            "help": "Package public project key.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package public key",
            "signature": null,
            "switch": "-package_publickey '<str>'",
            "type": "str",
            "value": null
        },
        "repo": {
            "defvalue": [],
            "example": [
                "cli: -package_repo 'git@github.com:aolofsson/oh.git'",
                "api: chip.set(package,'repo','git@github.com:aolofsson/oh.git')"
            ],
            "help": "Package IP address to source code repository.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package code repository",
            "signature": [],
            "switch": "-package_repo '<str>'",
            "type": "[str]",
            "value": []
        },
        "target": {
            "defvalue": [],
            "example": [
                "cli: -package_target 'asicflow_freepdk45'",
                "api: chip.set(package,'target','asicflow_freepdk45')"
            ],
            "help": "Package list of qualified compilation targets.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package qualified targets",
            "signature": [],
            "switch": "-package_target '<str>'",
            "type": "[str]",
            "value": []
        },
        "version": {
            "defvalue": null,
            "example": [
                "cli: -package_version '1.0'",
                "api: chip.set(package,'version','1.0')"
            ],
            "help": "Package version. Can be a branch, tag, commit hash,\nor a semver compatible version.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Package version",
            "signature": null,
            "switch": "-package_version '<str>'",
            "type": "str",
            "value": null
        }
    },
    "param": {
        "default": {
            "defvalue": null,
            "example": [
                "cli: -param 'N 64'",
                "api: chip.set('param','N', '64')"
            ],
            "help": "Sets a top level module parameter. The value\nis limited to basic data literals. The parameter override is\npassed into tools such as Verilator and Yosys. The parameters\nsupport Verilog integer literals (64'h4, 2'b0, 4) and strings.\nName of the top level module to compile.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Design parameter",
            "signature": null,
            "switch": "-param 'name <str>'",
            "type": "str",
            "value": null
        }
    },
    "pdk": {
        "aprtech": {
            "default": {
                "default": {
                    "default": {
                        "default": {
                            "author": [],
                            "copy": "false",
                            "date": [],
                            "defvalue": [],
                            "example": [
                                "cli: -pdk_aprtech 'openroad M10 12t lef tech.lef'",
                                "api: chip.set('pdk','aprtech','openroad','M10','12t','lef','tech.lef')"
                            ],
                            "filehash": [],
                            "hashalgo": "sha256",
                            "help": "Technology file containing setup information needed to enable DRC clean APR\nfor the specified stackup, libarch, and format. The 'libarch' specifies the\nlibrary architecture (e.g. library height). For example a PDK with support\nfor 9 and 12 track libraries might have 'libarchs' called 9t and 12t.\nThe standard filetype for specifying place and route design rules for a\nprocess node is through a 'lef' format technology file. The\n'filetype' used in the aprtech is used by the tool specific APR TCL scripts\nto set up the technology parameters. Some tools may require additional\nfiles beyond the tech.lef file. Examples of extra file types include\nantenna, tracks, tapcell, viarules, em.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK APR technology files",
                            "signature": [],
                            "switch": "-pdk_aprtech 'tool stackup libarch filetype <file>'",
                            "type": "[file]",
                            "value": []
                        }
                    }
                }
            }
        },
        "d0": {
            "defvalue": null,
            "example": [
                "cli: -pdk_d0 0.1",
                "api:  chip.set('pdk', 'd0', 0.1)"
            ],
            "help": "Process defect density (d0) expressed as random defects per cm^2. The\nvalue is used to calculate yield losses as a function of area, which in\nturn affects the chip full factory costs. Two yield models are\nsupported: Poisson (default), and Murphy. The Poisson based yield is\ncalculated as dy = exp(-area * d0/100). The Murphy based yield is\ncalculated as dy = ((1-exp(-area * d0/100))/(area * d0/100))^2.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK process defect density",
            "signature": null,
            "switch": "-pdk_d0 <float>",
            "type": "float",
            "value": null
        },
        "density": {
            "defvalue": null,
            "example": [
                "cli: -pdk_density 100e6",
                "api:  chip.set('pdk', 'density', 10e6)"
            ],
            "help": "Approximate logic density expressed as # transistors / mm^2\ncalculated as:\n0.6 * (Nand2 Transistor Count) / (Nand2 Cell Area) +\n0.4 * (Register Transistor Count) / (Register Cell Area)\nThe value is specified for a fixed standard cell library within a node\nand will differ depending on the library vendor, library track height\nand library type. The value can be used to to normalize the effective\ndensity reported for the design across different process nodes. The\nvalue can be derived from a variety of sources, including the PDK DRM,\nlibrary LEFs, conference presentations, and public analysis.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK transistor density",
            "signature": null,
            "switch": "-pdk_density <float>",
            "type": "float",
            "value": null
        },
        "devmodel": {
            "default": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_devmodel 'xyce spice M10 asap7.sp'",
                            "api: chip.set('pdk','devmodel','xyce','spice','M10','asap7.sp')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "List of filepaths to PDK device models for different simulation\npurposes and for different tools. Examples of device model types\ninclude spice, aging, electromigration, radiation. An example of a\n'spice' tool is xyce. Device models are specified on a per metal stack\nbasis. Process nodes with a single device model across all stacks will\nhave a unique parameter record per metal stack pointing to the same\ndevice model file.  Device types and tools are dynamic entries\nthat depend on the tool setup and device technology. Pseud-standardized\ndevice types include spice, em (electromigration), and aging.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK device models",
                        "signature": [],
                        "switch": "-pdk_devmodel 'tool simtype stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "directory": {
            "default": {
                "default": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_directory 'xyce rfmodel M10 rftechdir'",
                            "api: chip.set('pdk','directory','xyce','rfmodel','M10','rftechdir')"
                        ],
                        "help": "List of named directories specified on a per tool and per stackup basis.\nThe parameter should only be used for specifying files that are\nnot directly  supported by the SiliconCompiler PDK schema.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK named directory",
                        "signature": [],
                        "switch": "-pdk_directory 'tool key stackup <file>'",
                        "type": "[dir]",
                        "value": []
                    }
                }
            }
        },
        "display": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "false",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -pdk_display 'klayout M10 display.lyt'",
                        "api: chip.set('pdk','display','klayout','M10','display.cfg')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Display configuration files describing colors and pattern schemes for\nall layers in the PDK. The display configuration file is entered on a\nstackup and tool basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK display file",
                    "signature": [],
                    "switch": "-pdk_display 'tool stackup <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "doc": {
            "datasheet": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_datasheet datasheet.pdf",
                    "api: chip.set('pdk','doc',datasheet,'datasheet.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to datasheet document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK datasheet",
                "signature": [],
                "switch": "-pdk_doc_datasheet <file>",
                "type": "[file]",
                "value": []
            },
            "homepage": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_homepage 'index.html",
                    "api: chip.set('pdk','doc','homepage','index.html')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to PDK docs homepage. Modern PDKs can include tens or\nhundreds of individual documents. A single html entry point can\nbe used to present an organized documentation dashboard to the\ndesigner.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK documentation homepage",
                "signature": [],
                "switch": "-pdk_doc_homepage <file>",
                "type": "[file]",
                "value": []
            },
            "install": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_install install.pdf",
                    "api: chip.set('pdk','doc',install,'install.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to install document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK install",
                "signature": [],
                "switch": "-pdk_doc_install <file>",
                "type": "[file]",
                "value": []
            },
            "quickstart": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_quickstart quickstart.pdf",
                    "api: chip.set('pdk','doc',quickstart,'quickstart.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to quickstart document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK quickstart",
                "signature": [],
                "switch": "-pdk_doc_quickstart <file>",
                "type": "[file]",
                "value": []
            },
            "reference": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_reference reference.pdf",
                    "api: chip.set('pdk','doc',reference,'reference.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to reference document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK reference",
                "signature": [],
                "switch": "-pdk_doc_reference <file>",
                "type": "[file]",
                "value": []
            },
            "releasenotes": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_releasenotes releasenotes.pdf",
                    "api: chip.set('pdk','doc',releasenotes,'releasenotes.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to releasenotes document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK releasenotes",
                "signature": [],
                "switch": "-pdk_doc_releasenotes <file>",
                "type": "[file]",
                "value": []
            },
            "tutorial": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_tutorial tutorial.pdf",
                    "api: chip.set('pdk','doc',tutorial,'tutorial.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to tutorial document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK tutorial",
                "signature": [],
                "switch": "-pdk_doc_tutorial <file>",
                "type": "[file]",
                "value": []
            },
            "userguide": {
                "author": [],
                "copy": "false",
                "date": [],
                "defvalue": [],
                "example": [
                    "cli: -pdk_doc_userguide userguide.pdf",
                    "api: chip.set('pdk','doc',userguide,'userguide.pdf')"
                ],
                "filehash": [],
                "hashalgo": "sha256",
                "help": "Filepath to userguide document.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK userguide",
                "signature": [],
                "switch": "-pdk_doc_userguide <file>",
                "type": "[file]",
                "value": []
            }
        },
        "drc": {
            "runset": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_drc_runset 'magic M10 $PDK/drc.rs'",
                            "api: chip.set('pdk','drc','runset','magic','M10','$PDK/drc.rs')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Runset files for DRC verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK DRC runset files",
                        "signature": [],
                        "switch": "-pdk_drc_runset 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "waiver": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_drc_waiver 'magic M10 $PDK/drc.txt'",
                            "api: chip.set('pdk','drc','waiver','magic','M10','$PDK/drc.txt')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Waiver files for DRC verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK DRC waiver files",
                        "signature": [],
                        "switch": "-pdk_drc_waiver 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "edgemargin": {
            "defvalue": null,
            "example": [
                "cli: -pdk_edgemargin 1",
                "api:  chip.set('pdk', 'edgemargin', 1)"
            ],
            "help": "Keep-out distance/margin from the wafer edge inwards specified in mm.\nThe wafer edge is prone to chipping and need special treatment that\npreclude placement of designs in this area. The edge value is used to\ncalculate effective dies per wafer and full factory cost.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK wafer edge keep-out margin",
            "signature": null,
            "switch": "-pdk_edgemargin <float>",
            "type": "float",
            "value": null
        },
        "erc": {
            "runset": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_erc_runset 'magic M10 $PDK/erc.rs'",
                            "api: chip.set('pdk','erc','runset','magic','M10','$PDK/erc.rs')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Runset files for ERC verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK ERC runset files",
                        "signature": [],
                        "switch": "-pdk_erc_runset 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "waiver": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_erc_waiver 'magic M10 $PDK/erc.txt'",
                            "api: chip.set('pdk','erc','waiver','magic','M10','$PDK/erc.txt')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Waiver files for ERC verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK ERC waiver files",
                        "signature": [],
                        "switch": "-pdk_erc_waiver 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "file": {
            "default": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_file 'xyce spice M10 asap7.sp'",
                            "api: chip.set('pdk','file','xyce','spice','M10','asap7.sp')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "List of named files specified on a per tool and per stackup basis.\nThe parameter should only be used for specifying files that are\nnot directly  supported by the SiliconCompiler PDK schema.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK named file",
                        "signature": [],
                        "switch": "-pdk_file 'tool key stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "foundry": {
            "defvalue": null,
            "example": [
                "cli: -pdk_foundry virtual",
                "api:  chip.set('pdk', 'foundry', 'virtual')"
            ],
            "help": "Name of foundry corporation. Examples include intel, gf, tsmc,\nsamsung, skywater, virtual. The 'virtual' keyword is reserved for\nsimulated non-manufacturable processes.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "PDK foundry name",
            "signature": null,
            "switch": "-pdk_foundry <str>",
            "type": "str",
            "value": null
        },
        "grid": {
            "default": {
                "default": {
                    "adj": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_adj 'M10 m2 0.5'",
                            "api: chip.set('pdk','grid','M10','m2','adj','0.5')"
                        ],
                        "help": "Defines the routing resources adjustments for the design on a per layer\nbasis. The value is expressed as a fraction from 0 to 1. A value of\n0.5 reduces the routing resources by 50%. If not defined, 100%\nrouting resource utilization is permitted.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid resource adjustment",
                        "signature": null,
                        "switch": "-pdk_grid_adj 'stackup layer <float>'",
                        "type": "float",
                        "value": null
                    },
                    "cap": {
                        "default": {
                            "defvalue": null,
                            "example": [
                                "cli: -pdk_grid_cap 'M10 m2 fast 0.2'",
                                "api: chip.set('pdk','grid','M10','m2','cap','fast','0.2')"
                            ],
                            "help": "Unit capacitance of a wire defined by the grid width and spacing values\nin the 'grid' structure. The value is specified as ff/um on a per\nstackup, metal, and corner basis. As a rough rule of thumb, this value\ntends to stay around 0.2ff/um. This number should only be used for\nreality confirmation. Accurate analysis should use the PEX models.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK routing grid unit capacitance",
                            "signature": null,
                            "switch": "-pdk_grid_cap 'stackup layer corner <float>''",
                            "type": "float",
                            "value": null
                        }
                    },
                    "dir": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_dir 'M10 m1 horizontal'",
                            "api: chip.set('pdk','grid','M10','m1','dir','horizontal')"
                        ],
                        "help": "Preferred routing direction specified on a per stackup\nand per metal basis. Valid routing directions are horizontal\nand vertical.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid preferred direction",
                        "signature": null,
                        "switch": "-pdk_grid_dir 'stackup layer <str>'",
                        "type": "str",
                        "value": null
                    },
                    "name": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_name 'M10 metal1 m1'",
                            "api: chip.set('pdk','grid','M10','metal1','name','m1')"
                        ],
                        "help": "Maps PDK metal names to the SC standardized layer stack\nstarting with m1 as the lowest routing layer and ending\nwith m<n> as the highest routing layer. The map is\nspecified on a per metal stack basis.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid name map",
                        "signature": null,
                        "switch": "-pdk_grid_name 'stackup layer <str>'",
                        "type": "str",
                        "value": null
                    },
                    "res": {
                        "default": {
                            "defvalue": null,
                            "example": [
                                "cli: -pdk_grid_res 'M10 m2 fast 0.2'",
                                "api: chip.set('pdk','grid','M10','m2','res','fast','0.2')"
                            ],
                            "help": "Resistance of a wire defined by the grid width and spacing values\nin the 'grid' structure.  The value is specified as ohms/um on a per\nstackup, metal, and corner basis. The parameter is only meant to be\nused as a sanity check and for coarse design planning. Accurate\nanalysis should use the TCAD PEX models.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK routing grid unit resistance",
                            "signature": null,
                            "switch": "-pdk_grid_res 'stackup layer corner <float>''",
                            "type": "float",
                            "value": null
                        }
                    },
                    "tcr": {
                        "default": {
                            "defvalue": null,
                            "example": [
                                "cli: -pdk_grid_tcr 'M10 m2 fast 0.2'",
                                "api: chip.set('pdk','grid','M10','m2','tcr','fast','0.2')"
                            ],
                            "help": "Temperature coefficient of resistance of the wire defined by the grid\nwidth and spacing values in the 'grid' structure. The value is specified\nin %/ deg C on a per stackup, layer, and corner basis. The number is\nonly meant to be used as a sanity check and for coarse design\nplanning. Accurate analysis should use the PEX models.",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK routing grid temperature coefficient",
                            "signature": null,
                            "switch": "-pdk_grid_tcr 'stackup layer corner <float>'",
                            "type": "float",
                            "value": null
                        }
                    },
                    "xoffset": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_xoffset 'M10 m2 0.5'",
                            "api: chip.set('pdk','grid','M10','m2','xoffset','0.5')"
                        ],
                        "help": "Defines the grid offset of a vertical metal layer specified on a per\nstackup and per metal basis, specified in um.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid vertical wire offset",
                        "signature": null,
                        "switch": "-pdk_grid_xoffset 'stackup layer <float>'",
                        "type": "float",
                        "value": null
                    },
                    "xpitch": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_xpitch 'M10 m1 0.5'",
                            "api: chip.set('pdk','grid','M10','m1','xpitch','0.5')"
                        ],
                        "help": "Defines the routing pitch for vertical wires on a per stackup and\nper metal basis, specified in um.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid vertical wire pitch",
                        "signature": null,
                        "switch": "-pdk_grid_xpitch 'stackup layer <float>'",
                        "type": "float",
                        "value": null
                    },
                    "yoffset": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_yoffset 'M10 m2 0.5'",
                            "api: chip.set('pdk','grid','M10','m2','yoffset','0.5')"
                        ],
                        "help": "Defines the grid offset of a horizontal metal layer specified on a per\nstackup and per metal basis, specified in um.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid horizontal wire offset",
                        "signature": null,
                        "switch": "-pdk_grid_yoffset 'stackup layer <float>'",
                        "type": "float",
                        "value": null
                    },
                    "ypitch": {
                        "defvalue": null,
                        "example": [
                            "cli: -pdk_grid_ypitch 'M10 m1 0.5'",
                            "api: chip.set('pdk','grid','M10','m1','ypitch','0.5')"
                        ],
                        "help": "Defines the routing pitch for horizontal wires on a per stackup and\nper metal basis, specified in um.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK routing grid horizontal wire pitch",
                        "signature": null,
                        "switch": "-pdk_grid_ypitch 'stackup layer <float>'",
                        "type": "float",
                        "value": null
                    }
                }
            }
        },
        "hscribe": {
            "defvalue": null,
            "example": [
                "cli: -pdk_hscribe 0.1",
                "api:  chip.set('pdk', 'hscribe', 0.1)"
            ],
            "help": " Width of the horizontal scribe line (in mm) used during die separation.\nThe process is generally completed using a mechanical saw, but can be\ndone through combinations of mechanical saws, lasers, wafer thinning,\nand chemical etching in more advanced technologies. The value is used\nto calculate effective dies per wafer and full factory cost.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK horizontal scribe line width",
            "signature": null,
            "switch": "-pdk_hscribe <float>",
            "type": "float",
            "value": null
        },
        "layermap": {
            "default": {
                "default": {
                    "default": {
                        "default": {
                            "author": [],
                            "copy": "false",
                            "date": [],
                            "defvalue": [],
                            "example": [
                                "cli: -pdk_layermap 'klayout db gds M10 asap7.map'",
                                "api: chip.set('pdk','layermap','klayout','db','gds','M10','asap7.map')"
                            ],
                            "filehash": [],
                            "hashalgo": "sha256",
                            "help": "Files describing input/output mapping for streaming layout data from\none format to another. A foundry PDK will include an official layer\nlist for all user entered and generated layers supported in the GDS\naccepted by the foundry for processing, but there is no standardized\nlayer definition format that can be read and written by all EDA tools.\nTo ensure mask layer matching, key/value type mapping files are needed\nto convert EDA databases to/from GDS and to convert between different\ntypes of EDA databases. Layer maps are specified on a per metal\nstackup basis. The 'src' and 'dst' can be names of SC supported tools\nor file formats (like 'gds').",
                            "lock": "false",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK layer map file",
                            "signature": [],
                            "switch": "-pdk_layermap 'tool src dst stackup <file>'",
                            "type": "[file]",
                            "value": []
                        }
                    }
                }
            }
        },
        "lvs": {
            "runset": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_lvs_runset 'magic M10 $PDK/lvs.rs'",
                            "api: chip.set('pdk','lvs','runset','magic','M10','$PDK/lvs.rs')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Runset files for LVS verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK LVS runset files",
                        "signature": [],
                        "switch": "-pdk_lvs_runset 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            },
            "waiver": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_lvs_waiver 'magic M10 $PDK/lvs.txt'",
                            "api: chip.set('pdk','lvs','waiver','magic','M10','$PDK/lvs.txt')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "Waiver files for LVS verification.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK LVS waiver files",
                        "signature": [],
                        "switch": "-pdk_lvs_waiver 'tool stackup <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "node": {
            "defvalue": null,
            "example": [
                "cli: -pdk_node 130",
                "api:  chip.set('pdk', 'node', 130)"
            ],
            "help": "Approximate relative minimum dimension of the process target specified\nin nanometers. The parameter is required for flows and tools that\nleverage the value to drive technology dependent synthesis and APR\noptimization. Node examples include 180, 130, 90, 65, 45, 32, 22 14,\n10, 7, 5, 3.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "PDK process node",
            "signature": null,
            "switch": "-pdk_node <float>",
            "type": "float",
            "value": null
        },
        "pexmodel": {
            "default": {
                "default": {
                    "default": {
                        "author": [],
                        "copy": "false",
                        "date": [],
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_pexmodel 'fastcap M10 max wire.mod'",
                            "api: chip.set('pdk','pexmodel','fastcap','M10','max','wire.mod')"
                        ],
                        "filehash": [],
                        "hashalgo": "sha256",
                        "help": "List of filepaths to PDK wire TCAD models used during automated\nsynthesis, APR, and signoff verification. Pexmodels are specified on\na per metal stack basis. Corner values depend on the process being\nused, but typically include nomenclature such as min, max, nominal.\nFor exact names, refer to the DRM. Pexmodels are generally not\nstandardized and specified on a per tool basis. An example of pexmodel\ntype is 'fastcap'.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK parasitic TCAD models",
                        "signature": [],
                        "switch": "-pdk_pexmodel 'tool stackup corner <file>'",
                        "type": "[file]",
                        "value": []
                    }
                }
            }
        },
        "process": {
            "defvalue": null,
            "example": [
                "cli: -pdk_process asap7",
                "api:  chip.set('pdk', 'process', 'asap7')"
            ],
            "help": "Public name of the foundry process. The string is case insensitive and\nmust match the public process name exactly. Examples of virtual\nprocesses include freepdk45 and asap7.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "PDK process name",
            "signature": null,
            "switch": "-pdk_process <str>",
            "type": "str",
            "value": null
        },
        "sramsize": {
            "defvalue": null,
            "example": [
                "cli: -pdk_sramsize 0.032",
                "api:  chip.set('pdk', 'sramsize', '0.026')"
            ],
            "help": "Area of an SRAM bitcell expressed in um^2. The value can be derived\nfrom a variety of sources, including the PDK DRM, library LEFs,\nconference presentations, and public analysis. The number is a good\nfirst order indicator of SRAM density for large memory arrays where\nthe bitcell dominates the array I/O logic.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK SRAM bitcell size",
            "signature": null,
            "switch": "-pdk_sramsize <float>",
            "type": "float",
            "value": null
        },
        "stackup": {
            "defvalue": [],
            "example": [
                "cli: -pdk_stackup 2MA4MB2MC",
                "api: chip.add('pdk','stackup','2MA4MB2MC')"
            ],
            "help": "List of all metal stackups offered in the process node. Older process\nnodes may only offer a single metal stackup, while advanced nodes\noffer a large but finite list of metal stacks with varying combinations\nof metal line pitches and thicknesses. Stackup naming is unique to a\nfoundry, but is generally a long string or code. For example, a 10\nmetal stackup with two 1x wide, four 2x wide, and 4x wide metals,\nmight be identified as 2MA4MB2MC, where MA, MB, and MC denote wiring\nlayers with different properties (thickness, width, space). Each\nstackup will come with its own set of routing technology files and\nparasitic models specified in the pdk_pexmodel and pdk_aprtech\nparameters.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "PDK metal stackups",
            "signature": [],
            "switch": "-pdk_stackup <str>",
            "type": "[str]",
            "value": []
        },
        "variable": {
            "default": {
                "default": {
                    "default": {
                        "defvalue": [],
                        "example": [
                            "cli: -pdk_variable 'xyce modeltype M10 bsim4'",
                            "api: chip.set('pdk','variable','xyce','modeltype','M10','bsim4')"
                        ],
                        "help": " List of key/value strings specified on a per tool and per stackup basis.\nThe parameter should only be used for specifying variables that are\nnot directly  supported by the SiliconCompiler PDK schema.",
                        "lock": "false",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK named variable",
                        "signature": [],
                        "switch": "-pdk_variable 'tool stackup key <str>'",
                        "type": "[str]",
                        "value": []
                    }
                }
            }
        },
        "version": {
            "defvalue": null,
            "example": [
                "cli: -pdk_version 1.0",
                "api:  chip.set('pdk', 'version', '1.0')"
            ],
            "help": "Alphanumeric string specifying the version of the PDK. Verification of\ncorrect PDK and IP versions is a hard ASIC tapeout require in all\ncommercial foundries. The version number can be used for design manifest\ntracking and tapeout checklists.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK version number",
            "signature": null,
            "switch": "-pdk_version <str>",
            "type": "str",
            "value": null
        },
        "vscribe": {
            "defvalue": null,
            "example": [
                "cli: -pdk_vscribe 0.1",
                "api:  chip.set('pdk', 'vscribe', 0.1)"
            ],
            "help": " Width of the vertical scribe line (in mm) used during die separation.\nThe process is generally completed using a mechanical saw, but can be\ndone through combinations of mechanical saws, lasers, wafer thinning,\nand chemical etching in more advanced technologies. The value is used\nto calculate effective dies per wafer and full factory cost.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK vertical scribe line width",
            "signature": null,
            "switch": "-pdk_vscribe <float>",
            "type": "float",
            "value": null
        },
        "wafercost": {
            "defvalue": null,
            "example": [
                "cli: -pdk_wafercost 10000",
                "api:  chip.set('pdk', 'wafercost', 10000)"
            ],
            "help": "Raw cost per wafer purchased specified in USD, not accounting for\nyield loss. The values is used to calculate chip full factory costs.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "PDK wafer cost",
            "signature": null,
            "switch": "-pdk_wafercost <float>",
            "type": "float",
            "value": null
        },
        "wafersize": {
            "defvalue": null,
            "example": [
                "cli: -pdk_wafersize 300",
                "api:  chip.set('pdk', 'wafersize', 300)"
            ],
            "help": "Wafer diameter used in manufacturing process specified in mm. The\nstandard diameter for leading edge manufacturing is 300mm. For older\nprocess technologies and specialty fabs, smaller diameters such as\n200, 100, 125, 100 are common. The value is used to calculate dies per\nwafer and full factory chip costs.",
            "lock": "false",
            "require": "asic",
            "scope": "global",
            "shorthelp": "PDK process node",
            "signature": null,
            "switch": "-pdk_wafersize <float>",
            "type": "float",
            "value": null
        }
    },
    "quiet": {
        "defvalue": "false",
        "example": [
            "cli: -quiet",
            "api: chip.set('quiet', True)"
        ],
        "help": "The -quiet option forces all steps to print to a log file.\nThis can be useful with Modern EDA tools which print\nsignificant content to the screen.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Quiet execution",
        "signature": null,
        "switch": "-quiet <bool>",
        "type": "bool",
        "value": "false"
    },
    "read": {
        "def": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_def 'sta 0 mydesign.def'",
                        "api: chip.set('read','def','sta','0','mydesign.def')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in DEF specified on a per step\nand index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Read DEF file",
                    "signature": [],
                    "switch": "-read_def 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "gds": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_gds 'sta 0 mydesign.gds'",
                        "api: chip.set('read','gds','sta','0','mydesign.gds')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in GDS specified on a per step\nand index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Read GDS file",
                    "signature": [],
                    "switch": "-read_gds 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "gerber": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_gerber 'sta 0 mydesign.gerber'",
                        "api: chip.set('read','gerber','sta','0','mydesign.gerber')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in GERBER specified on a per step\nand index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Read GERBER file",
                    "signature": [],
                    "switch": "-read_gerber 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "netlist": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_netlist 'sta 0 mydesign.netlist'",
                        "api: chip.set('read','netlist','sta','0','mydesign.netlist')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in NETLIST specified on a per step\nand index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Read NETLIST file",
                    "signature": [],
                    "switch": "-read_netlist 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "pcf": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_pcf 'sta 0 mydesign.pcf'",
                        "api: chip.set('read','pcf','sta','0','mydesign.pcf')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in PCF specified on a per step\nand index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Read PCF file",
                    "signature": [],
                    "switch": "-read_pcf 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "saif": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_saif 'sta 0 mydesign.saif'",
                        "api: chip.set('read','saif','sta','0','mydesign.saif')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in SAIF specified on a per step\nand index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Read SAIF file",
                    "signature": [],
                    "switch": "-read_saif 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "sdc": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_sdc 'sta 0 mydesign.sdc'",
                        "api: chip.set('read','sdc','sta','0','mydesign.sdc')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in SDC specified on a per step\nand index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Read SDC file",
                    "signature": [],
                    "switch": "-read_sdc 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "sdf": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_sdf 'sta 0 mydesign.sdf'",
                        "api: chip.set('read','sdf','sta','0','mydesign.sdf')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in SDF specified on a per step\nand index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Read SDF file",
                    "signature": [],
                    "switch": "-read_sdf 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "spef": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_spef 'sta 0 mydesign.spef'",
                        "api: chip.set('read','spef','sta','0','mydesign.spef')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in SPEF specified on a per step\nand index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Read SPEF file",
                    "signature": [],
                    "switch": "-read_spef 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        },
        "vcd": {
            "default": {
                "default": {
                    "author": [],
                    "copy": "true",
                    "date": [],
                    "defvalue": [],
                    "example": [
                        "cli: -read_vcd 'sta 0 mydesign.vcd'",
                        "api: chip.set('read','vcd','sta','0','mydesign.vcd')"
                    ],
                    "filehash": [],
                    "hashalgo": "sha256",
                    "help": "Reads files(s) formatted in VCD specified on a per step\nand index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Read VCD file",
                    "signature": [],
                    "switch": "-read_vcd 'step index <file>'",
                    "type": "[file]",
                    "value": []
                }
            }
        }
    },
    "record": {
        "default": {
            "default": {
                "arch": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_arch 'dfm 0 <x86_64>'",
                        "api: chip.set('record','dfm','0','arch', <x86_64>)"
                    ],
                    "help": "Record tracking the hardware architecture per step and index basis. (x86_64, rv64imafdc)",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: hardware architecture",
                    "signature": null,
                    "switch": "-record_arch 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "distro": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_distro 'dfm 0 <ubuntu>'",
                        "api: chip.set('record','dfm','0','distro', <ubuntu>)"
                    ],
                    "help": "Record tracking the distro name per step and index basis. (ubuntu, redhat, centos)",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: distro name",
                    "signature": null,
                    "switch": "-record_distro 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "endtime": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_endtime 'dfm 0 <2021-09-06 12:20:20>'",
                        "api: chip.set('record','dfm','0','endtime', <2021-09-06 12:20:20>)"
                    ],
                    "help": "Record tracking the end time per step and index basis. Time is reported in the ISO 8601 format YYYY-MM-DD HR:MIN:SEC",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: end time",
                    "signature": null,
                    "switch": "-record_endtime 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "ipaddr": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_ipaddr 'dfm 0 <<addr>>'",
                        "api: chip.set('record','dfm','0','ipaddr', <<addr>>)"
                    ],
                    "help": "Record tracking the IP address per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: IP address",
                    "signature": null,
                    "switch": "-record_ipaddr 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "kernelversion": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_kernelversion 'dfm 0 <5.11.0-34-generic>'",
                        "api: chip.set('record','dfm','0','kernelversion', <5.11.0-34-generic>)"
                    ],
                    "help": "Record tracking the O/S kernel version per step and index basis. Used for platforms that support a distinction\nbetween os kernels and os distributions.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: O/S kernel version",
                    "signature": null,
                    "switch": "-record_kernelversion 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "macaddr": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_macaddr 'dfm 0 <<addr>>'",
                        "api: chip.set('record','dfm','0','macaddr', <<addr>>)"
                    ],
                    "help": "Record tracking the MAC address per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: MAC address",
                    "signature": null,
                    "switch": "-record_macaddr 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "machine": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_machine 'dfm 0 <carbon>'",
                        "api: chip.set('record','dfm','0','machine', <carbon>)"
                    ],
                    "help": "Record tracking the machine name per step and index basis. (myhost, localhost, ...",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: machine name",
                    "signature": null,
                    "switch": "-record_machine 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "osversion": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_osversion 'dfm 0 <20.04.1-Ubuntu>'",
                        "api: chip.set('record','dfm','0','osversion', <20.04.1-Ubuntu>)"
                    ],
                    "help": "Record tracking the O/S version per step and index basis. Since there is not standard version system for operating\nsystems, extracting information from is platform dependent.\nFor Linux based operating systems, the 'osversion' is the\nversion of the distro.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: O/S version",
                    "signature": null,
                    "switch": "-record_osversion 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "platform": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_platform 'dfm 0 <linux>'",
                        "api: chip.set('record','dfm','0','platform', <linux>)"
                    ],
                    "help": "Record tracking the platform name per step and index basis. (linux, windows, freebsd)",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: platform name",
                    "signature": null,
                    "switch": "-record_platform 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "publickey": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_publickey 'dfm 0 <<key>>'",
                        "api: chip.set('record','dfm','0','publickey', <<key>>)"
                    ],
                    "help": "Record tracking the public key per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: public key",
                    "signature": null,
                    "switch": "-record_publickey 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "region": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_region 'dfm 0 <US Gov Boston>'",
                        "api: chip.set('record','dfm','0','region', <US Gov Boston>)"
                    ],
                    "help": "Record tracking the cloud region per step and index basis. Recommended naming methodology:\n\n* local: node is the local machine\n* onprem: node in on-premises IT infrastructure\n* public: generic public cloud\n* govcloud: generic US government cloud\n* <region>: cloud and entity specific region string name",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: cloud region",
                    "signature": null,
                    "switch": "-record_region 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "starttime": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_starttime 'dfm 0 <2021-09-06 12:20:20>'",
                        "api: chip.set('record','dfm','0','starttime', <2021-09-06 12:20:20>)"
                    ],
                    "help": "Record tracking the start time per step and index basis. Time is reported in the ISO 8601 format YYYY-MM-DD HR:MIN:SEC",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: start time",
                    "signature": null,
                    "switch": "-record_starttime 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "toolversion": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_toolversion 'dfm 0 <1.0>'",
                        "api: chip.set('record','dfm','0','toolversion', <1.0>)"
                    ],
                    "help": "Record tracking the tool version per step and index basis. The tool version captured correspnds to the 'tool'\nparameter within the 'eda' dictionary.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: tool version",
                    "signature": null,
                    "switch": "-record_toolversion 'step index <str>'",
                    "type": "str",
                    "value": null
                },
                "userid": {
                    "defvalue": null,
                    "example": [
                        "cli: -record_userid 'dfm 0 <wiley>'",
                        "api: chip.set('record','dfm','0','userid', <wiley>)"
                    ],
                    "help": "Record tracking the userid per step and index basis.",
                    "lock": "false",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Record: userid",
                    "signature": null,
                    "switch": "-record_userid 'step index <str>'",
                    "type": "str",
                    "value": null
                }
            }
        }
    },
    "relax": {
        "defvalue": "false",
        "example": [
            "cli: -relax",
            "api: chip.set('relax', 'true')"
        ],
        "help": "Specifies that tools should be lenient and suppress some\nwarnings that may or may not indicate design issues.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Relax RTL linting",
        "signature": null,
        "switch": "-relax <bool>",
        "type": "bool",
        "value": "false"
    },
    "remote": {
        "defvalue": "false",
        "example": [
            "cli: -remote",
            "api: chip.set('remote', True)"
        ],
        "help": "Sends job for remote processing if set to true. The remote\noption requires a credentials file to be placed in the home\ndirectory. Fore more information, see the credentials\nparameter.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Enable remote processing",
        "signature": null,
        "switch": "-remote <bool>",
        "type": "bool",
        "value": "false"
    },
    "scpath": {
        "defvalue": [],
        "example": [
            "cli: -scpath '/home/$USER/sclib'",
            "api: chip.set('scpath', '/home/$USER/sclib')"
        ],
        "help": "Specifies python modules paths for target import.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Search path",
        "signature": [],
        "switch": "-scpath <dir>",
        "type": "[dir]",
        "value": []
    },
    "show": {
        "defvalue": "false",
        "example": [
            "cli: -show",
            "api: chip.set('show', 'true')"
        ],
        "help": "Specifies that the final hardware layout should be\nshown after the compilation has been completed. The\nfinal layout and tool used to display the layout is\nflow dependent.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Show layout",
        "signature": null,
        "switch": "-show <bool>",
        "type": "bool",
        "value": "false"
    },
    "showtool": {
        "default": {
            "defvalue": null,
            "example": [
                "cli: -showtool 'gds klayout'",
                "api: chip.set('showtool', 'gds', 'klayout')"
            ],
            "help": "Selects the tool to use by the show function for displaying\nthe specified filetype.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "Select data display tool",
            "signature": null,
            "switch": "-showtool 'filetype <tool>'",
            "type": "str",
            "value": null
        }
    },
    "skipall": {
        "defvalue": "false",
        "example": [
            "cli: -skipall",
            "api: chip.set('skipall', 'true')"
        ],
        "help": "Skips the execution of all tools in run(), enabling a quick\ncheck of tool and setup without having to run through each\nstep of a flow to completion.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Skip all tasks",
        "signature": null,
        "switch": "-skipall <bool>",
        "type": "bool",
        "value": "false"
    },
    "skipcheck": {
        "defvalue": "false",
        "example": [
            "cli: -skipcheck",
            "api: chip.set('skipcheck', True)"
        ],
        "help": "Bypasses the strict runtime manifest check. Can be used for\naccelerating initial bringup of tool/flow/pdk/libs targets.\nThe flag should not be used for production compilation.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Skip manifest check",
        "signature": null,
        "switch": "-skipcheck <bool>",
        "type": "bool",
        "value": "false"
    },
    "skipstep": {
        "defvalue": [],
        "example": [
            "cli: -skipstep lvs",
            "api: chip.set('skipstep', 'lvs')"
        ],
        "help": "List of steps to skip during execution.The default is to\nexecute all steps  defined in the flow graph.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Skip step list",
        "signature": [],
        "switch": "-skipstep <str>",
        "type": "[str]",
        "value": []
    },
    "source": {
        "author": [],
        "copy": "true",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: hello_world.v",
            "api: chip.set('source', 'hello_world.v')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "A list of source files to read in for elaboration. The files are read\nin order from first to last entered. File type is inferred from the\nfile suffix.\n(\\*.v, \\*.vh) = Verilog\n(\\*.vhd)       = VHDL\n(\\*.sv)        = SystemVerilog\n(\\*.c)         = C\n(\\*.cpp, .cc)  = C++\n(\\*.py)        = Python",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design source files",
        "signature": [],
        "switch": null,
        "type": "[file]",
        "value": []
    },
    "steplist": {
        "defvalue": [],
        "example": [
            "cli: -steplist 'import'",
            "api: chip.set('steplist','import')"
        ],
        "help": "List of steps to execute. The default is to execute all steps\ndefined in the flow graph.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Compilation step list",
        "signature": [],
        "switch": "-steplist <step>",
        "type": "[str]",
        "value": []
    },
    "supply": {
        "default": {
            "level": {
                "defvalue": null,
                "example": [
                    "cli: -supply_level 'vdd 1.0'",
                    "api: chip.set('supply','vdd','level','1.0')"
                ],
                "help": "Voltage level for the name supply, specified in Volts.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Supply level",
                "signature": null,
                "switch": "-supply_level 'supplyname <float>'",
                "type": "float",
                "value": null
            },
            "noise": {
                "defvalue": null,
                "example": [
                    "cli: -supply_noise 'vdd 1.0'",
                    "api: chip.set('supply','vdd','noise','1.0')"
                ],
                "help": "Voltage noise for the name supply, specified in Volts.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Supply noise",
                "signature": null,
                "switch": "-supply_noise 'supplyname <float>'",
                "type": "float",
                "value": null
            },
            "pin": {
                "defvalue": null,
                "example": [
                    "cli: -supply_pin 'vdd vdd_0'",
                    "api: chip.set('supply','vdd','pin','vdd_0')"
                ],
                "help": "Defines a supply name alias to assign to a power source.\nA power supply source can be a list of block pins or a regulator\noutput pin.",
                "lock": "false",
                "require": null,
                "scope": "global",
                "shorthelp": "Supply pin mapping",
                "signature": null,
                "switch": "-supply_pin 'supplyname <str>'",
                "type": "str",
                "value": null
            }
        }
    },
    "target": {
        "defvalue": null,
        "example": [
            "cli: -target freepdk45_demo",
            "api: chip.set('target','freepdk45_demo')"
        ],
        "help": "Sets a target module to be used for compilation. The target\nmodule must set up all paramaters needed. The target module\nmay load multiple flows and libraries.",
        "lock": "false",
        "require": null,
        "scope": "job",
        "shorthelp": "Compilation target",
        "signature": null,
        "switch": "-target <str>",
        "type": "str",
        "value": null
    },
    "techarg": {
        "default": {
            "defvalue": [],
            "example": [
                "cli: -techarg 'mimcap true",
                "api: chip.set('techarg','mimcap', 'true')"
            ],
            "help": "Parameter passed in as key/value pair to the technology target\nreferenced in the load_pdk() API call. See the target technology\nfor specific guidelines regarding configuration parameters.",
            "lock": "false",
            "require": null,
            "scope": "job",
            "shorthelp": "Target technology argument",
            "signature": [],
            "switch": "-techarg 'arg <str>",
            "type": "[str]",
            "value": []
        }
    },
    "testbench": {
        "author": [],
        "copy": "true",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -testbench tb_top.v",
            "api: chip.set('testbench', 'tb_top.v')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "A list of testbench sources. The files are read in order from first to\nlast entered. File type is inferred from the file suffix:\n(\\*.v, \\*.vh) = Verilog\n(\\*.vhd)      = VHDL\n(\\*.sv)       = SystemVerilog\n(\\*.c)        = C\n(\\*.cpp, .cc) = C++\n(\\*.py)       = Python",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Testbench files",
        "signature": [],
        "switch": "-testbench <file>",
        "type": "[file]",
        "value": []
    },
    "testmodule": {
        "defvalue": null,
        "example": [
            "cli: -testmodule top",
            "api: chip.set('testmodule', 'top')"
        ],
        "help": "Name of the top level test module.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Testbench top module",
        "signature": null,
        "switch": "-testmodule <str>",
        "type": "str",
        "value": null
    },
    "trace": {
        "defvalue": "false",
        "example": [
            "cli: -trace",
            "api: chip.set('trace', True)"
        ],
        "help": "Enables debug tracing during compilation and/or runtime.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Enable debug traces",
        "signature": null,
        "switch": "-trace <bool>",
        "type": "bool",
        "value": "false"
    },
    "track": {
        "defvalue": "false",
        "example": [
            "cli: -track",
            "api: chip.set('track', 'true')"
        ],
        "help": "Turns on tracking of all 'record' parameters during each\ntask. Tracking will result in potentially sensitive data\nbeing recorded in the manifest so only turn on this feature\nif you have control of the final manifest.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Enable provenance tracking",
        "signature": null,
        "switch": "-track <bool>",
        "type": "bool",
        "value": "false"
    },
    "unit": {
        "capacitance": {
            "defvalue": "pf",
            "example": [
                "cli: -unit_capacitance 'pf'",
                "api: chip.set('unit','capacitance',pf)"
            ],
            "help": "Units used for capacitance when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for capacitance",
            "signature": null,
            "switch": "-record_capacitance '<str>'",
            "type": "str",
            "value": "pf"
        },
        "current": {
            "defvalue": "ma",
            "example": [
                "cli: -unit_current 'ma'",
                "api: chip.set('unit','current',ma)"
            ],
            "help": "Units used for current when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for current",
            "signature": null,
            "switch": "-record_current '<str>'",
            "type": "str",
            "value": "ma"
        },
        "inducatance": {
            "defvalue": "nh",
            "example": [
                "cli: -unit_inducatance 'nh'",
                "api: chip.set('unit','inducatance',nh)"
            ],
            "help": "Units used for inducatance when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for inducatance",
            "signature": null,
            "switch": "-record_inducatance '<str>'",
            "type": "str",
            "value": "nh"
        },
        "power": {
            "defvalue": "mw",
            "example": [
                "cli: -unit_power 'mw'",
                "api: chip.set('unit','power',mw)"
            ],
            "help": "Units used for power when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for power",
            "signature": null,
            "switch": "-record_power '<str>'",
            "type": "str",
            "value": "mw"
        },
        "resistance": {
            "defvalue": "ohm",
            "example": [
                "cli: -unit_resistance 'ohm'",
                "api: chip.set('unit','resistance',ohm)"
            ],
            "help": "Units used for resistance when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for resistance",
            "signature": null,
            "switch": "-record_resistance '<str>'",
            "type": "str",
            "value": "ohm"
        },
        "time": {
            "defvalue": "ns",
            "example": [
                "cli: -unit_time 'ns'",
                "api: chip.set('unit','time',ns)"
            ],
            "help": "Units used for time when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for time",
            "signature": null,
            "switch": "-record_time '<str>'",
            "type": "str",
            "value": "ns"
        },
        "voltage": {
            "defvalue": "mv",
            "example": [
                "cli: -unit_voltage 'mv'",
                "api: chip.set('unit','voltage',mv)"
            ],
            "help": "Units used for voltage when not explicitly specified.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Units used for voltage",
            "signature": null,
            "switch": "-record_voltage '<str>'",
            "type": "str",
            "value": "mv"
        }
    },
    "vercheck": {
        "defvalue": "false",
        "example": [
            "cli: -vercheck",
            "api: chip.set('vercheck', 'true')"
        ],
        "help": "Enforces strict version checking on all invoked tools if True.\nThe list of supported version numbers is defined in the\n'version' parameter in the 'eda' dictionary for each tool.",
        "lock": "false",
        "require": "all",
        "scope": "job",
        "shorthelp": "Enable version checking",
        "signature": null,
        "switch": "-vercheck <bool>",
        "type": "bool",
        "value": "false"
    },
    "version": {
        "print": {
            "defvalue": "false",
            "example": [
                "cli: -version",
                "api: chip.get('version', 'print')"
            ],
            "help": "Command line switch to print the schema and software\nversion numbers in an 'sc' command line app.",
            "lock": "false",
            "require": "all",
            "scope": "global",
            "shorthelp": "Prints version number",
            "signature": null,
            "switch": "-version <bool>",
            "type": "bool",
            "value": "false"
        },
        "schema": {
            "defvalue": "0.8.0",
            "example": [
                "cli: -version_schema",
                "api: chip.get('version', 'schema')"
            ],
            "help": "SiliconCompiler schema version number.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Schema version number",
            "signature": null,
            "switch": "-version_schema <str>",
            "type": "str",
            "value": "0.8.0"
        },
        "software": {
            "defvalue": "0.8.0",
            "example": [
                "cli: -version_software",
                "api: chip.get('version', 'software')"
            ],
            "help": "SiliconCompiler software version number.",
            "lock": "false",
            "require": null,
            "scope": "global",
            "shorthelp": "Software version number",
            "signature": null,
            "switch": "-version_software <str>",
            "type": "str",
            "value": "0.8.0"
        }
    },
    "vlib": {
        "author": [],
        "copy": "false",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -v './mylib.v'",
            "api: chip.set('vlib','./mylib.v')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "List of library files to be read in. Modules found in the\nlibraries are not interpreted as root modules.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design libraries",
        "signature": [],
        "switch": "-v <file>",
        "type": "[file]",
        "value": []
    },
    "waveform": {
        "author": [],
        "copy": "false",
        "date": [],
        "defvalue": [],
        "example": [
            "cli: -waveform mytrace.vcd",
            "api: chip.set('waveform','mytrace.vcd')"
        ],
        "filehash": [],
        "hashalgo": "sha256",
        "help": "Waveform(s) used as a golden test vectors to ensure that compilation\ntransformations do not modify the functional behavior of the source\ncode. The waveform file must be compatible with the testbench and\ncompilation flow tools.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Testbench golden waveforms",
        "signature": [],
        "switch": "-waveform <file>",
        "type": "[file]",
        "value": []
    },
    "ydir": {
        "defvalue": [],
        "example": [
            "cli: -y './mylib'",
            "api: chip.set('ydir','./mylib')"
        ],
        "help": "Search paths to look for verilog modules found in the the\nsource list. The import engine will look for modules inside\nfiles with the specified +libext+ param suffix.",
        "lock": "false",
        "require": null,
        "scope": "global",
        "shorthelp": "Design module search paths",
        "signature": [],
        "switch": "-y <dir>",
        "type": "[dir]",
        "value": []
    }
}
